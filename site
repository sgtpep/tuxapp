#!/usr/bin/env python
from __future__ import print_function
import base64
import cgi
import functools
import glob
import imp
import mimetypes
import os
import re
import string
import sys

media = imp.load_source('media', os.path.join(os.path.dirname(__file__), 'media'))
tuxapp = imp.load_source('tuxapp', os.path.join(os.path.dirname(__file__), 'tuxapp'))

@tuxapp.asserts(lambda path, *args, **kwargs: "Unknown image format: {}".format(os.path.basename(path)))
def detect_image_extension(path):
  if 'imghdr' not in sys.modules:
    import imghdr
    imghdr.tests.append(lambda header, file: b"<svg " in header and 'svg')
    imghdr.tests.append(lambda header, file: header[:4] == b"\0\0\1\0" and 'ico')
  return sys.modules['imghdr'].what(path) or ''

def write_app_page_worker(app):
  return write_app_page(app)

@tuxapp.silences
def write_app_pages(apps):
  import contextlib
  import multiprocessing
  with contextlib.closing(multiprocessing.Pool(10)) as pool:
    return functools.reduce(
      lambda result, app_result: result and app_result,
      pool.imap_unordered(write_app_page_worker, apps),
      True,
    )

build_actions = lambda *children: \
  join_elements(
    build_tag('style', """
    @media (min-width: 30em) {
      .actions {
        float: right;
        margin: 0;
      }
    }
    .actions > * {
      margin-right: 0.5em;
    }
    .actions > :last-child {
      margin-right: 0;
    }
    """),
    build_tag("p.actions", *children),
  )

build_app_card = lambda app, is_heading=False: \
  build_card(
    get_app_icon_path(app),
    query_app_name(app),
    tuxapp.query_appfile(app, 'title'),
    is_heading,
  )

build_app_gallery = lambda app: \
  join_elements(
    build_tag('style', """
    .app-gallery {
      margin: 1em 0;
    }
    .app-gallery .lightbox {
      display: inline-block;
      margin-right: 0.25em;
    }
    .app-gallery .lightbox img,
    .app-gallery .lightbox video {
      display: block;
      max-height: 5em;
      max-width: 10em;
    }
    @media (min-width: 40em) {
      .app-gallery .lightbox img,
      .app-gallery .lightbox video {
        max-height: 7.5em;
        max-width: 15em;
      }
    }
    """),
    build_tag(".app-gallery",
      ''.join(build_lightbox("Screenshot", symlink_app_image(app, media.get_app_screenshot_path(app, tuxapp.hash_md5(url)))) for url in query_app_info(app, 'screenshot-urls').split()),
      ''.join(build_lightbox("Video", symlink_app_image(app, media.get_app_video_thumbnail_path(app, tuxapp.hash_md5(url))) if os.path.isfile(media.get_app_video_thumbnail_path(app, tuxapp.hash_md5(url))) else os.path.basename(media.get_app_video_thumbnail_path(app, tuxapp.hash_md5(url))), url) for url in query_app_info(app, 'video-urls').split()),
    ),
  )

build_app_image = lambda app, path: \
  join_elements(
    build_tag('style', """
    .app-image {
      display: block;
      margin: 1em 0;
    }
    @media (min-width: 40em) {
      .app-image {
        float: right;
        margin-left: 1em;
        margin-top: 0;
        max-width: 50%;
      }
    }
    .app-image .lightbox,
    .app-image .lightbox img {
      display: block;
    }
    .app-image .lightbox img {
      max-height: 15em;
      max-width: 100%;
    }
    """),
    build_tag(".app-image", build_lightbox("Image", symlink_app_image(app, path))),
  )

build_app_info = lambda app: \
  join_elements(
    build_tag('dt', "Category:"),
    build_tag('dd', build_tag('a', escape_html(get_app_category(app)), href=get_app_category_url(app))),
    build_tag('dt', "Group:"),
    build_tag('dd', build_tag('a', escape_html(get_app_group(app)), href=get_app_group_url(app))),
    build_tag('dt', "Free license:"),
    build_tag('dd', 'yes' if tuxapp.query_appfile(app, 'free-license') == 'yes' else 'no'),
    build_tag('dt', "Homepage:"),
    build_tag('dd', build_tag('a', escape_html(tuxapp.query_appfile(app, 'homepage-url')), href=tuxapp.query_appfile(app, 'homepage-url'))),
    join_elements(
      build_tag('dt', "GitHub repository:"),
      build_tag('dd', build_tag('a', escape_html(query_app_info(app, 'github-repository')), href="https://github.com/{}".format(query_app_info(app, 'github-repository')))),
    ) if query_app_info(app, 'github-repository') else '',
    build_tag('dt', "Version:"),
    build_tag('dd',
      escape_html(tuxapp.fetch_app_version(app)),
      " ({})".format(build_tag('a', "changelog", href=query_app_info(app, 'changelog-url'))) if query_app_info(app, 'changelog-url') else '',
    ),
    build_tag('dt', "Downloads:"),
    build_tag('dd',
      build_tag('a', escape_html(get_app_downloads_url(app)), href=get_app_downloads_url(app)),
      " ({})".format(escape_html(", ".join(re.findall(r"^download-(.+)-url=", tuxapp.read_appfile('atom'), re.M)))),
    ),
    join_elements(
      build_tag('dt', "Distribution formats:"),
      build_tag('dd',
        build_tag('span', "&asymp; ", title="Detected automatically, may be inaccurate"),
        escape_html(", ".join(get_download_format_name(format) for format in query_app_info(app, 'download-formats').split())),
      ),
    ) if query_app_info(app, 'download-formats') else '',
  )

build_app_instructions = lambda app: \
  join_elements(
    build_tag('h2', "How to install"),
    build_tag('p', """Run this command from the terminal to install <code>{}</code> using the <code>tuxapp</code> script hosted on <a href="https://github.com/{}/blob/master/tuxapp">GitHub</a>:""".format(app, tuxapp.get_github_repository())),
    build_tag('style', """
    .instructions-code {
      user-select: all;
      white-space: pre-wrap;
    }
    """),
    build_tag('pre', build_tag("code.instructions-code", r"python <(url=https://raw.githubusercontent.com/{}/master/tuxapp; wget -O - $url || curl $url) {}".format(tuxapp.get_github_repository(), app))),
    build_tag('p', "Alternatively, you may also download the <code>tuxapp</code> script and run it locally to install <code>{}</code>:".format(app)),
    build_tag('pre', '\n'.join(build_tag("code.instructions-code", command) for command in (
      r"url=https://raw.githubusercontent.com/{}/master/tuxapp; wget $url || curl -o tuxapp $url".format(tuxapp.get_github_repository()),
      r"chmod +x ./tuxapp",
      r"./tuxapp {}".format(app),
    ))),
    build_tag('p', """To make apps run sandboxed (isolated from your system and sensitive files) install <a href="https://firejail.wordpress.com/">Firejail</a> using your package manager. For example, on Debian/Ubuntu use this command:"""),
    build_tag('pre', build_tag("code.instructions-code", r"sudo apt install firejail")),
  )

build_app_page = lambda app: \
  build_page("{} - {}".format(
    query_app_name(app),
    tuxapp.query_appfile(app, 'category').title(),
  ),
    build_actions(
      build_tag('a', "Edit appfile", href=get_github_url("edit/master/apps/{}".format(app))),
      build_tag('a', "Report issue", href=get_github_url("issues/new?title={}".format(app))),
    ),
    build_breadcrumbs(
      build_tag('a', escape_html(get_app_category(app)), href=get_app_category_url(app)),
      build_tag('h1', escape_html(query_app_name(app))),
    ),
    build_app_card(app, True),
    ''.join(build_app_image(app, path) for path in glob.iglob(media.get_app_image_path(app, '*'))),
    build_tag('p', escape_html(tuxapp.query_appfile(app, 'description'))) if tuxapp.query_appfile(app, 'description') else '',
    build_tag('p', escape_html(tuxapp.query_appfile(app, 'note'))) if tuxapp.query_appfile(app, 'note') else '',
    build_app_info(app),
    build_app_gallery(app),
    build_app_instructions(app),
  )

build_breadcrumbs = lambda *children: \
  join_elements(
    build_tag('style', """
    .breadcrumbs {
      margin: 1em 0;
    }
    .breadcrumbs h1 {
      display: inline;
      font-size: medium;
    }
    """),
    build_tag(".breadcrumbs", " &gt; ".join((build_tag("a", "Home", href="/"),) + children)),
  )

build_card = lambda path, name, title, is_heading=False: \
  join_elements(
    build_tag('style', """
    .card {
      margin: 1em 0;
    }
    .card > :first-child {
      min-width: 2em;
    }
    """),
    build_tag(".flag.card{}".format(".is-heading" if is_heading else ''),
      build_tag('style', """
      .card-icon {
        margin: auto;
        max-width: 100%;
      }
      .card.is-heading .card-icon {
        max-height: 3em;
      }
      """),
      build_tag('', build_tag("img.card-icon",
        alt="Icon",
        src=build_data_uri(path),
      )),
      build_tag('',
        build_tag('style', """
        .card-name {
          font-size: larger;
          font-weight: bold;
        }
        .card.is-heading .card-name {
          font-size: x-large;
        }
        """),
        build_tag(".card-name", escape_html(name)),
        build_tag('style', """
        .card.is-heading .card-title {
          font-weight: bold;
        }
        """),
        build_tag(".card-title", escape_html(title)),
      ),
    ),
  )

build_data_uri = lambda path: \
  "data:{};base64,{}".format(
    mimetypes.guess_type("_.{}".format(detect_image_extension(path)))[0],
    base64.b64encode(tuxapp.read_file(path, True)),
  ) \
    if os.path.isfile(path) else \
  ''

build_flag = lambda *children, **attributes: \
  join_elements(
    build_tag('style', """
    .flag {
      display: block;
      width: 100%;
    }
    .flag > * {
      display: table-cell;
      vertical-align: middle;
    }
    .flag > :first-child {
      padding-right: 0.5em;
    }
    .flag > :first-child img {
      display: block;
    }
    .flag > :last-child {
      width: 100%;
    }
    """),
    build_tag(".flag", *children, **attributes),
  )

build_footer = tuxapp.memoizes()(
  lambda: \
    join_elements(
      build_separator(),
      build_actions(
        build_tag('a', "Source code", href=get_github_url()),
        build_tag('a', "Issues", href=get_github_url("issues")),
      ),
      build_tag('style', """
      .footer-copyright {
        color: grey;
        font-size: smaller;
      }
      """),
      build_tag(".footer-copyright",
        build_tag('p', "&copy; 2017 {}".format(get_site_name())),
        build_tag('p', "Linux&reg; is the registered trademark of Linus Torvalds in the U.S. and other countries."),
      ),
      build_tag('script', r"""
      if (location.protocol == "file:") {
        Array.prototype.forEach.call(document.querySelectorAll('a'), function(anchor) {
          if (anchor.href == "file:///") anchor.href = location.href.replace(/(\/""" + os.path.basename(get_build_path()) + r"""\/).*$/, "$1index.html", 1);
          else if (~anchor.href.indexOf("file:///") && !~anchor.href.indexOf('#')) anchor.href += "index.html";
        });
      }
      (function() {
      var scrollTop = 0;
      function getElement(selector, url) {
        return (document.getElementById((url || location.hash).split('#', 2)[1]) || { querySelector: function() {} }).querySelector(selector);
      }
      addEventListener('hashchange', function(event) {
        scrollTo(0, scrollTop);
        if (/#$/.test(event.newURL)) history.replaceState({}, '', location.href.slice(0, -1));
        if (/#video-.+$/.test(event.oldURL)) {
          if (getElement('video', event.oldURL)) getElement('video', event.oldURL).pause();
          else if (getElement('iframe', event.oldURL)) getElement('iframe', event.oldURL).contentWindow.postMessage('{ "event": "command", "func": "pauseVideo", "args": "" }', '*');
        }
      });
      addEventListener('keydown', function(event) {
        if (location.hash) {
          if (event.keyCode == 27) location.hash = '';
          else if (event.keyCode == 37 && getElement(".lightbox-action.is-previous").hash) location.hash = getElement(".lightbox-action.is-previous").hash;
          else if (event.keyCode == 39 && getElement(".lightbox-action.is-next").hash) location.hash = getElement(".lightbox-action.is-next").hash;
          else var isDefault = true;
          if (!isDefault) event.preventDefault();
        }
      });
      addEventListener('scroll', function(event) {
        scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
      });
      })();
      """),
    )
)

build_header = tuxapp.memoizes()(
  lambda: \
    join_elements(
      "<!DOCTYPE html>",
      build_tag('link',
        href=build_data_uri(get_logo_path()),
        rel='icon',
      ),
      build_tag('meta', charset='utf-8'),
      build_tag('meta',
        content="width=device-width, initial-scale=1",
        name='viewport',
      ),
      build_flag(
        build_tag('a',
          build_tag('style', """
          .header-logo {
            max-width: 3.5em;
          }
          """),
          build_tag("img.header-logo",
            alt="Logo",
            src=build_data_uri(get_logo_path(),
          )),
          href='/',
          title="Home",
        ),
        build_tag('',
          build_tag('style', """
          .header-top > :last-child {
            display: block;
          }
          @media (min-width: 30em) {
            .header-top > :last-child {
              display: table-cell;
              text-align: right;
            }
          }
          """),
          build_tag(".flag.header-top",
            build_tag('style', """
            .header-name {
              color: inherit;
              font-family: serif;
              font-size: xx-large;
              text-decoration: none;
              white-space: nowrap;
            }
            """),
            build_tag("a.header-name", get_site_name(),
              href="/",
              title="Home",
            ),
            build_search(),
          ),
          build_tag('style', """
          .header-description {
            color: grey;
            font-style: italic;
          }
          """),
          build_tag(".header-description", "An open catalog of easily installable and up-to-date Linux&reg; applications."),
        ),
      ),
      build_separator(),
    )
)

build_lightbox = lambda text, path, url=None: \
  join_elements(
    build_tag("a.lightbox",
      build_tag('video',
        preload='metadata',
        src=url,
      ) \
        if url and not os.path.isfile(path) else \
      build_tag('img',
        alt=text,
        src=os.path.basename(path),
      ), href="#{}".format(os.path.basename(path).rsplit('.', 1)[0]),
    ),
    build_tag('style', """
    .lightbox-overlay {
      background: rgba(0, 0, 0, 0.75);
      bottom: 0;
      display: none;
      left: 0;
      position: fixed;
      right: 0;
      top: 0;
    }
    .lightbox-overlay:target {
      display: block;
    }
    .lightbox-overlay iframe,
    .lightbox-overlay img,
    .lightbox-overlay video {
      -webkit-transform: translate(-50%, -50%);
      left: 50%;
      max-height: 90vh;
      max-width: 90vw;
      position: absolute;
      top: 50%;
      transform: translate(-50%, -50%);
    }
    .lightbox-overlay iframe {
      border: none;
    }
    """),
    build_tag("#{}.lightbox-overlay".format(os.path.basename(path).rsplit('.', 1)[0]),
      build_tag('iframe',
        allowfullscreen=True,
        height='480',
        src="https://www.youtube.com/embed/{}?enablejsapi=1".format(tuxapp.search("(?<=^https://www\.youtube\.com/watch\?v=).+", url)),
        width='853',
      ) \
        if url and url.startswith("https://www.youtube.com/") else \
      build_tag('video',
        controls=True,
        preload='metadata',
        src=url,
      ) \
        if url else \
      build_tag('img',
        alt=text,
        src=os.path.basename(path),
      ),
      build_tag('style', """
      .lightbox-action {
        color: white;
        font-size: 2.5em;
        position: absolute;
        text-align: center;
        text-decoration: none;
        width: 1.2em;
      }
      """),
      build_tag('style', """
      .lightbox-action.is-close {
        right: 0;
        top: 0;
      }
      """),
      build_tag("a.lightbox-action.is-close", "&times;",
        href='#',
        title="Close",
      ),
      build_tag('style', """
      .lightbox-action.is-next,
      .lightbox-action.is-previous {
        margin-top: -0.6em;
        top: 50%;
      }
      .lightbox-action.is-next[href="#"],
      .lightbox-action.is-previous[href="#"] {
        visibility: hidden;
      }
      .lightbox-action.is-next {
        right: 0;
      }
      .lightbox-action.is-previous {
        left: 0;
      }
      """),
      build_tag("a.lightbox-action.is-next", "&#9656;", title="Next"),
      build_tag("a.lightbox-action.is-previous", "&#9666;", title="Previous"),
    ),
  )

build_page = lambda title, *children: \
  process_scripts(process_styles(process_lightbox(join_elements(
    build_tag('style', """
    :link {
      color: mediumblue;
    }
    :visited {
      color: navy;
    }
    :link:active,
    :visited:active {
      color: red;
    }
    body {
      color: #222;
      font-family: sans-serif;
      margin: 1em auto;
      max-width: 60em;
      padding: 0 1em;
      word-wrap: break-word;
    }
    """),
    build_header(),
    build_tag('title', "{} - {}".format(escape_html(title), get_site_name()) if title else get_site_name()),
    join_elements(*children),
    build_footer(),
  ))))

build_search = lambda: \
  join_elements(
    build_tag('style', """
    .header-search.is-hidden {
      display: none;
    }
    """),
    build_tag("form.header-search.is-hidden",
      build_tag('script', r"""document.querySelector(".header-search").className = document.querySelector(".header-search").className.replace(" is-hidden", '');"""),
      build_tag('input',
        name='query',
        placeholder="Search",
        type='search',
      ),
      onsubmit="""location = "https://www.google.ru/search?q=" + encodeURIComponent("site:" + location.host + ' ' + this.query.value); return false;""",
    ),
  )

build_separator = lambda: \
  join_elements(
    build_tag('style', """
    .separator {
      background: lightgrey;
      border: none;
      clear: both;
      height: 1px;
      margin: 1em 0;
    }
    """),
    build_tag("hr.separator"),
  )

build_tag = lambda selector, *children, **attributes: \
  u"""<{}{}>{}{}""".format(
    extract_tag_name(selector),
    " {}".format(build_tag_attributes(selector, attributes)) if attributes or '#' in selector or '.' in selector else '',
    ''.join(children),
    "</{}>".format(extract_tag_name(selector)) if children or extract_tag_name(selector) not in get_void_elements() else '',
  )

build_tag_attributes = lambda selector, attributes: \
  ' '.join("{}{}".format(
    name,
    '' if value is True else "=\"{}\"".format(escape_html(value)),
  ) for name, value in sorted(dict(attributes, **{
    'class': ' '.join(re.findall(r"(?<=\.)[\w-]+", selector)),
    'id': ' '.join(re.findall(r"(?<=#)[\w-]+", selector)),
  }).items()) if value)

escape_html = lambda html: cgi.escape(html, True)

extract_tag_name = lambda selector: re.split(r"[#.]", selector, 1)[0] or 'div'

filter_html = lambda html: html

get_app_category = lambda app: tuxapp.query_appfile(app, 'category').title()

get_app_category_url = lambda app: "../../categories/{}/".format(tuxapp.query_appfile(app, 'category'))

get_app_directory_path = lambda app: "{}/apps/{}".format(get_build_path(), app)

get_app_downloads_url = lambda app: query_app_info(app, 'downloads-url') or tuxapp.query_appfile(app, 'homepage-url')

get_app_group = lambda app: tuxapp.query_appfile(app, 'group').replace('-', ' ').title()

get_app_group_url = lambda app: "../../groups/{}/".format(tuxapp.query_appfile(app, 'group'))

get_app_icon_path = tuxapp.asserts("No icon found for {}")(
  lambda app: next(glob.iglob(media.get_app_icon_path(app, '*')), None)
)

get_app_page_path = lambda app: "{}/index.html".format(get_app_directory_path(app))

get_assets_path = lambda: "{}/assets".format(os.path.dirname(__file__))

get_build_path = lambda: "{}/build".format(os.path.dirname(__file__))

get_download_format_name = lambda format: \
  {
    'appimage': "AppImage",
    'deb': "deb",
    'flatpak': "Flatpak",
    'rpm': "rpm",
    'snap': "snap",
    'tar': "tarball",
  }.get(format, format.title())

get_github_url = lambda url='': "https://github.com/{}{}".format(tuxapp.get_github_repository(), "/{}".format(url) if url else '')

get_logo_path = lambda: "{}/logo.png".format(get_assets_path())

get_site_name = lambda: "TuxApp"

get_style_comparison_value = lambda styles: "{:03d}{}".format(":{}.#".format(string.letters).find(styles[0]), styles)

get_styles_index = lambda html: html.find('>', html.rfind("<meta ")) + 1 or len(html)

get_void_elements = lambda: \
  (
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
  )

join_elements = lambda *elements: ''.join(elements)

main = \
  tuxapp.handles_exceptions(
  tuxapp.does(lambda arguments=tuple(sys.argv[1:]), *args, **kwargs: arguments and tuxapp.call_process("xdg-open {} > /dev/null 2>&1 &".format(tuxapp.join_arguments(get_app_page_path(tuxapp.extract_app(argument)) for argument in arguments))))(
    lambda arguments=tuple(sys.argv[1:]): \
      (arguments or tuxapp.remove_directory(get_build_path())) and \
      write_app_pages(tuxapp.extract_app(argument) for argument in arguments or glob.iglob(tuxapp.get_appfile_path('*')))
  ))

process_lightbox = lambda html: update_lightbox(html, tuple(re.findall(r""" class="lightbox"[^"]* href="([^"]+)""", html)))

process_scripts = lambda html: \
  re.sub(r"(<script[^>]*>)(.*?)(</script>)", lambda match: "{}{}{}".format(
    match.group(1),
    re.sub(r"^\s+", '', match.group(2), 0, re.M).replace('\n', ''),
    match.group(3),
  ), html, 0, re.S)

process_styles = lambda html: \
  u"{}{}{}".format(
    re.sub(r"<style[^>]*>.*?</style>", '', html[:get_styles_index(html)], 0, re.S),
    build_tag('style', ''.join(sorted(set(re.sub(r"^\s+", '', styles, 0, re.M).replace('\n', '') for styles in re.findall(r"<style[^>]*>(.*?)</style>", html, re.S)), lambda x, y: cmp(get_style_comparison_value(x), get_style_comparison_value(y))))),
    re.sub(r"<style[^>]*>.*?</style>", '', html[get_styles_index(html):], 0, re.S),
  )

query_app_info = tuxapp.asserts(lambda app, key, *args, **kwargs: kwargs['result'] is None and "Failed to get {}.{}".format(app, key))(
  lambda app, key: tuxapp.search(r"(?<=^{}=).*$".format(re.escape(key)), tuxapp.read_file(media.get_app_info_path(app)), re.M)
)

query_app_name = lambda app: tuxapp.query_appfile(app, 'name').lstrip('~')

symlink_app_image = lambda app, path: \
  tuxapp.symlink_file("{}/{}.{}".format(
    get_app_directory_path(app),
    os.path.basename(path),
    detect_image_extension(path),
  ), path)

update_lightbox = lambda html, urls: \
  functools.reduce(
    lambda html, url: re.sub(r"""( class="lightbox-action is-previous" (?!href=))""", r"""\g<0>href="{}" """.format(url), html, 1),
    ('#',) + urls[:-1],
    functools.reduce(
      lambda html, url: re.sub(r"""( class="lightbox-action is-next" (?!href=))""", r"""\g<0>href="{}" """.format(url), html, 1),
      urls[1:] + ('#',),
      html,
    ),
  )

write_app_page = lambda app: tuxapp.write_file(get_app_page_path(app), filter_html(build_app_page(app)))

if __name__ == '__main__':
  main()
