#!/usr/bin/env python
from __future__ import print_function
import cgi
import collections
import datetime
import functools
import glob
import imp
import itertools
import json
import os
import re
import string
import sys

media = imp.load_source('media', os.path.join(os.path.dirname(__file__), 'media'))
tuxapp = imp.load_source('tuxapp', os.path.join(os.path.dirname(__file__), 'tuxapp'))

@tuxapp.asserts(lambda path, *args, **kwargs: "Unknown image format: {}".format(os.path.basename(path)))
def detect_image_extension(path):
  if 'imghdr' not in sys.modules:
    import imghdr
    imghdr.tests.append(lambda header, file: b"<svg " in header and 'svg')
    imghdr.tests.append(lambda header, file: header[:4] == b"\0\0\1\0" and 'ico')
  return sys.modules['imghdr'].what(path) or ''

def write_app_worker(app):
  return write_app(app)

def write_apps(apps):
  import contextlib
  import multiprocessing
  with contextlib.closing(multiprocessing.Pool(10)) as pool:
    return functools.reduce(
      lambda result, app_result: result and app_result,
      pool.imap_unordered(write_app_worker, apps),
      True,
    )

build_absolute_url = lambda url='': "https://tuxapp.org/{}".format(url)

build_actions = lambda *children: \
  join_elements(
    build_style("""
    @media (min-width: 30em) {
      .actions {
        float: right;
        margin: 0;
      }
    }
    .actions > * {
      margin-right: 0.5em;
    }
    .actions > :last-child {
      margin-right: 0;
    }
    """),
    build_tag("p.actions", None, *children),
  )

build_app = lambda app: \
  process_lightbox(join_elements(
    build_head(
      os.path.relpath(get_build_path(), os.path.dirname(get_app_path(app))),
      "{} - {}".format(filter_app_name(tuxapp.query_appfile(app, 'name')), filter_category_name(tuxapp.query_appfile(app, 'category'))),
      {
        'description': tuxapp.query_appfile(app, 'description') or tuxapp.query_appfile(app, 'title'),
        'image': build_app_og_image_url(app),
        'title': "Install {} with {}".format(tuxapp.query_appfile(app, 'name'), get_site_name()),
        'url': get_app_url(app),
      },
    ),
    build_header(),
    build_json_ld(get_app_json_ld(app)),
    build_actions(
      build_tag('a', "Edit appfile", href=get_github_url("edit/master/apps/{}".format(app))),
      build_tag('a', "Report issue", href=get_github_url("issues/new?title={}".format(app))),
    ),
    build_breadcrumbs(
      build_tag('a', filter_category_name(tuxapp.query_appfile(app, 'category')), href=get_category_url(tuxapp.query_appfile(app, 'category'))),
      build_tag('h1', filter_app_name(tuxapp.query_appfile(app, 'name'))),
    ),
    build_app_card(app, False, True),
    build_app_image(app),
    tuxapp.query_appfile(app, 'description') and build_tag('p', tuxapp.query_appfile(app, 'description')),
    tuxapp.query_appfile(app, 'note') and build_tag('p', tuxapp.query_appfile(app, 'note')),
    build_app_info(app),
    build_app_gallery(app),
    build_app_instructions(app),
    build_footer(),
  ))

build_app_card = lambda app, is_anchor=False, is_heading=False: \
  build_card(
    build_app_image_url(app, media.get_app_icon_path(app, tuxapp.query_appfile(app, 'icon-url'))),
    filter_app_name(tuxapp.query_appfile(app, 'name')),
    tuxapp.query_appfile(app, 'title'),
    is_anchor and get_app_url(app),
    None,
    ("free license",) if tuxapp.query_appfile(app, 'free-license') else (),
    is_heading,
  )

build_app_gallery = lambda app: \
  join_elements(
    build_style("""
    .app-gallery {
      margin: 1em -0.125em;
    }
    .app-gallery .lightbox {
      box-sizing: border-box;
      display: inline-block;
      padding: 0.125em;
      vertical-align: top;
      width: 100%;
    }
    @media (min-width: 20em) {
      .app-gallery .lightbox {
        width: 50%;
      }
    }
    @media (min-width: 30em) {
      .app-gallery .lightbox {
        width: 33.3%;
      }
    }
    @media (min-width: 48em) {
      .app-gallery .lightbox {
        width: 25%;
      }
    }
    .app-gallery .lightbox img,
    .app-gallery .lightbox video {
      display: block;
      max-width: 100%;
    }
    """),
    build_tag(".app-gallery", None, *(
      tuple(build_lightbox("Screenshot", build_app_image_url(app, media.get_app_screenshot_path(app, url))) for url in media.query_app_info(app, 'screenshot-urls').split()) + \
      tuple(build_lightbox("Video", build_app_image_url(app, media.get_app_video_thumbnail_path(app, thumbnail_url)), video_url, thumbnail_url == '-') for video_url, thumbnail_url in zip(media.query_app_info(app, 'video-urls').split(), media.query_app_info(app, 'video-thumbnail-urls').split())))
    ),
    build_script(r"""
    (function() {
    var scrollTop = 0;
    function getElement(selector, url) {
      return (document.getElementById((url || location.hash).split('#', 2)[1]) || { querySelector: function() {} }).querySelector(selector);
    }
    addEventListener('hashchange', function(event) {
      scrollTo(0, scrollTop);
      if (/#$/.test(event.newURL)) history.replaceState({}, '', location.href.slice(0, -1));
      if (/#video-.+$/.test(event.oldURL)) {
        if (getElement('video', event.oldURL)) getElement('video', event.oldURL).pause();
        else if (getElement('iframe', event.oldURL)) getElement('iframe', event.oldURL).contentWindow.postMessage('{ "event": "command", "func": "pauseVideo", "args": "" }', '*');
      }
    });
    addEventListener('keydown', function(event) {
      if (location.hash && getElement(".lightbox-action")) {
        if (event.keyCode == 27) location.hash = getElement(".lightbox-action.is-close").hash;
        else if (event.keyCode == 37 && getElement(".lightbox-action.is-previous").hash) location.hash = getElement(".lightbox-action.is-previous").hash;
        else if (event.keyCode == 39 && getElement(".lightbox-action.is-next").hash) location.hash = getElement(".lightbox-action.is-next").hash;
        else var isDefault = true;
        if (!isDefault) event.preventDefault();
      }
    });
    addEventListener('scroll', function(event) {
      scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
    });
    })();
    """),
  )

build_app_image = lambda app: \
  join_elements(
    build_style("""
    .app-image {
      margin: 1em 0;
    }
    @media (min-width: 40em) {
      .app-image {
        float: right;
        margin-left: 1em;
        margin-top: 0;
        max-width: 50%;
      }
    }
    .app-image .lightbox,
    .app-image .lightbox img {
      display: block;
    }
    .app-image .lightbox img {
      max-height: 15em;
      max-width: 100%;
    }
    """),
    media.query_app_info(app, 'image-url') and build_tag(".app-image", None, build_lightbox("Image", build_app_image_url(app, media.get_app_image_path(app, media.query_app_info(app, 'image-url'))))),
  )

build_app_image_url = lambda app, path: \
  os.path.join(get_app_url(app), os.path.basename(tuxapp.symlink_file(path, "{}/{}.{}".format(
    os.path.dirname(get_app_path(app)),
    os.path.basename(path),
    detect_image_extension(path),
  )) if os.path.isfile(path) else path))

build_app_info = lambda app: \
  join_elements(
    build_tag('dt', "Category:"),
    build_tag('dd', None, build_tag('a', filter_category_name(tuxapp.query_appfile(app, 'category')), href=get_category_url(tuxapp.query_appfile(app, 'category')))),
    build_tag('dt', "Group:"),
    build_tag('dd', None, build_tag('a', filter_group_name(tuxapp.query_appfile(app, 'group')), href=get_group_url(tuxapp.query_appfile(app, 'group')))),
    build_tag('dt', "Free license:"),
    build_tag('dd', 'yes' if tuxapp.query_appfile(app, 'free-license') == 'yes' else 'no'),
    build_tag('dt', "Homepage:"),
    build_tag('dd', None, build_tag('a', tuxapp.query_appfile(app, 'homepage-url'), href=tuxapp.query_appfile(app, 'homepage-url'))),
    join_elements(
      build_tag('dt', "GitHub repository:"),
      build_tag('dd', None, build_tag('a', media.query_app_info(app, 'github-repository'), href="https://github.com/{}".format(media.query_app_info(app, 'github-repository')))),
    ) if media.query_app_info(app, 'github-repository') else '',
    build_tag('dt', "Version:"),
    build_tag('dd', tuxapp.fetch_app_version(app), media.query_app_info(app, 'changelog-url') and " ({})".format(build_tag('a', "changelog", href=media.query_app_info(app, 'changelog-url')))),
    build_tag('dt', "Downloads:"),
    build_tag('dd', None,
      build_tag('a', media.query_app_info(app, 'downloads-url'), href=media.query_app_info(app, 'downloads-url')) \
        if media.query_app_info(app, 'downloads-url') else \
      build_tag('a', tuxapp.query_appfile(app, 'homepage-url'), href=tuxapp.query_appfile(app, 'homepage-url')),
      escape_html(" ({})".format(", ".join(re.findall(r"^download-(.+)-url=", tuxapp.read_appfile(app), re.M)))),
    ),
    join_elements(
      build_tag('dt', "Distribution formats:"),
      build_tag('dd', None,
        build_tag('span', u"\N{ALMOST EQUAL TO} ", title="Detected automatically, may be inaccurate"),
        escape_html(", ".join(get_format_name(format) for format in media.query_app_info(app, 'download-formats').split())),
      ),
    ) if media.query_app_info(app, 'download-formats') else '',
  )

build_app_instructions = lambda app: \
  join_elements(
    build_tag('h2', "How to install"),
    build_tag('p', None, "Run this command from the terminal to install {} using the {} script hosted on {}:".format(
      build_tag('code', app),
      build_tag('code', tuxapp.__name__),
      build_tag('a', "GitHub", href=get_github_url("blob/master/tuxapp"))),
    ),
    build_style("""
    .instructions-code {
      user-select: all;
      white-space: pre-wrap;
    }
    """),
    build_tag('pre', None, build_tag("code.instructions-code", r"python <(url=https://raw.githubusercontent.com/{}/master/{}; wget -O - $url || curl $url) {}".format(
      tuxapp.get_github_repository(),
      tuxapp.__name__,
      app,
    ))),
    build_tag('p', None, "Alternatively, you may also download the {} script and run it locally to install {}:".format(
      build_tag('code', tuxapp.__name__),
      build_tag('code', app),
    )),
    build_tag('pre', None, '\n'.join(build_tag("code.instructions-code", command) for command in (
      r"url=https://raw.githubusercontent.com/{0}/master/{1}; wget $url || curl -o {1} $url".format(
        tuxapp.get_github_repository(),
        tuxapp.__name__,
      ),
      r"chmod +x ./{}".format(tuxapp.__name__),
      r"./{} {}".format(tuxapp.__name__, app),
    ))),
    build_tag('p', None, "To make apps run sandboxed (isolated from your system and sensitive files) install {} using your package manager. For example, on Debian/Ubuntu use this command:".format(build_tag('a', "Firejail", href="https://firejail.wordpress.com/"))),
    build_tag('pre', None, build_tag("code.instructions-code", r"sudo apt install firejail")),
  )

build_app_og_image_url = lambda app: \
  build_app_image_url(app, media.get_app_image_path(app, media.query_app_info(app, 'image-url'))) \
    if media.query_app_info(app, 'image-url') else \
  build_app_image_url(app, media.get_app_icon_path(app, tuxapp.query_appfile(app, 'icon-url')))

build_breadcrumbs = lambda *children: \
  join_elements(
    build_style("""
    .breadcrumbs {
      margin: 1em 0;
    }
    .breadcrumbs h1 {
      display: inline;
      font-size: inherit;
    }
    """),
    build_tag(".breadcrumbs", None, escape_html(" > ").join((build_tag("a", "Home", href='.'),) + children)),
  )

build_card = lambda icon_url, name, title, url=None, count=None, tags=(), is_heading=False: \
  join_elements(
    build_style("""
    .card {
      margin: 1em 0;
    }
    """),
    build_flag(
      ".card{}{}".format(
        ".is-category" if url and url.startswith(get_category_url('')) else '',
        ".is-heading" if is_heading else '',
      ),
      url,
      build_style("""
      .card-icon {
        height: 2em;
        min-width: 2em;
      }
      .card.is-category .card-icon,
      .card.is-heading .card-icon {
        height: 3em;
        min-width: 3em;
      }
      .card-icon img {
        margin: 0 auto;
        max-width: 100%;
      }
      """),
      build_tag(".card-icon", None, build_tag('img',
        alt="Icon",
        src=icon_url,
      )),
      build_tag('', None,
        build_style("""
        .card-name {
          font-size: larger;
          font-weight: bold;
        }
        .card.is-heading .card-name {
          font-size: x-large;
        }
        """),
        build_tag(".card-name", name,
          build_style("""
          .card-count {
            color: """ + get_text_color() + """;
            display: inline-block;
            font-weight: normal;
            margin-left: 0.25em;
          }
          """),
          build_tag("span.card-count", "({})".format(count)) if count else '',
        ),
        build_style("""
        .card-title {
          display: inline-block;
        }
        a .card-title {
          color: """ + get_text_color() + """;
        }
        .card.is-heading .card-title {
          font-weight: bold;
        }
        .card-title > * {
          margin-right: 0.5em;
        }
        """),
        build_tag(".card-title", None,
          build_tag('span', title),
          build_style("""
          .card-tag {
            color: grey;
            display: inline-block;
            font-size: smaller;
          }
          """),
          *(build_tag("span.card-tag", tag) for tag in tags)
        ),
      ),
    ),
  )

build_category = lambda category: \
  join_elements(
    build_head(os.path.relpath(get_build_path(), os.path.dirname(get_category_path(category))), filter_category_name(category)),
    build_header(),
    build_breadcrumbs(build_tag('h1', filter_category_name(category))),
    build_tag('p', "{}.".format(get_category_description(category))),
  )

build_columns = lambda children: \
  join_elements(
    # https://stackoverflow.com/q/7785374
    build_style("""
    @media (min-width: 40em) {
      .columns {
        -moz-column-count: 2;
        -webkit-column-count: 2;
        column-count: 2;
      }
      .columns > * {
        -webkit-column-break-inside: avoid;
        break-inside: avoid;
        page-break-inside: avoid;
      }
      .columns > :first-child {
        margin-top: 0;
      }
      .columns > :last-child {
        margin-bottom: 0;
      }
    }
    @media (min-width: 60em) {
      .columns {
        -moz-column-count: 3;
        -webkit-column-count: 3;
        column-count: 3;
      }
    }
    """),
    build_tag(".columns", None, *children),
  )

build_combined_styles = lambda: build_tag('combined-styles')

build_feed = lambda apps: \
  join_elements(
    """<?xml version="1.0" encoding="utf-8"?>""",
    build_tag('feed', None,
      build_tag('icon', get_logo_url()),
      build_tag('id', build_absolute_url()),
      build_tag('link', href='.'),
      build_tag('link',
        href=get_feed_url(),
        rel='self',
      ),
      build_tag('logo', get_logo_url()),
      build_tag('rights', get_copyright()),
      build_tag('subtitle', get_description()),
      build_tag('title', "{} - {}".format(get_feed_name(), get_site_name())),
      build_tag('updated', "{}Z".format(datetime.datetime.fromtimestamp(apps[-1][1]).isoformat()) if apps else ''),
      *(build_tag('entry', None,
        build_tag('category', term=filter_category_name(tuxapp.query_appfile(app, 'category'))),
        build_tag('content', None, u"<![CDATA[{}{}]]>".format(
          build_tag('img', src=build_app_image_url(app, media.get_app_image_path(app, media.query_app_info(app, 'image-url')) if media.query_app_info(app, 'image-url') else media.get_app_icon_path(app, tuxapp.query_appfile(app, 'icon-url')))),
          build_app_info(app),
        ), type='html'),
        build_tag('id', build_absolute_url(get_app_url(app))),
        build_tag('link', href=get_app_url(app)),
        build_tag('title', "{} - {}".format(filter_app_name(tuxapp.query_appfile(app, 'name')), tuxapp.query_appfile(app, 'title'))),
        build_tag('updated', "{}Z".format(datetime.datetime.fromtimestamp(timestamp).isoformat())),
      ) for app, timestamp in apps),
      xmlns="http://www.w3.org/2005/Atom",
      **{'xml:base': build_absolute_url()}
    )
  )

build_flag = lambda selector, url, *children: \
  join_elements(
    build_style("""
    .flag {
      display: block;
      width: 100%;
    }
    .flag > * {
      display: table-cell;
      vertical-align: middle;
    }
    .flag > :first-child {
      padding-right: 0.5em;
    }
    .flag > :first-child img {
      display: block;
    }
    .flag > :last-child {
      width: 100%;
    }
    """),
    build_tag("{}.flag{}".format('a' if url else '', selector or ''), None, *children, href=url),
  )

build_footer = tuxapp.memoizes()(
  lambda: \
    join_elements(
      build_separator(),
      build_actions(
        build_tag('a', "Source code", href=get_github_url()),
        build_tag('a', "Issues", href=get_github_url("issues")),
        build_tag('a', "Feed", href=get_feed_url()),
      ),
      build_style("""
      .footer-copyright {
        color: grey;
        font-size: smaller;
      }
      """),
      build_tag(".footer-copyright", None,
        build_tag('p', get_copyright()),
        build_tag('p', u"Linux\N{REGISTERED SIGN} is the registered trademark of Linus Torvalds in the U.S. and other countries."),
      ),
      build_script(r"""
      if (location.protocol == "file:") {
        Array.prototype.forEach.call(document.querySelectorAll('a'), function(anchor) {
          if (~anchor.href.indexOf("file:///") && anchor.pathname.slice(-1) == '/') {
            if (~anchor.href.indexOf('#')) anchor.href = anchor.href.replace('#', "index.html#", 1);
            else anchor.href += "index.html";
          }
        });
      }
      """),
    )
)

build_group = lambda group: \
  join_elements(
    build_head(os.path.relpath(get_build_path(), os.path.dirname(get_group_path(group))), filter_group_name(group)),
    build_header(),
    build_breadcrumbs(build_tag('h1', filter_group_name(group))),
  )

build_head = lambda base_url, title=None, overrides={}: \
  join_elements(
    "<!DOCTYPE html>",
    """<html lang="en">""",
    build_tag('base', href=base_url),
    build_tag('meta', charset='utf-8'),
    build_tag('meta',
      content=get_site_name(),
      name='application-name',
    ),
    build_tag('meta',
      content=overrides.get('description', get_description()),
      name='description',
    ),
    build_tag('meta',
      content="width=device-width, initial-scale=1",
      name='viewport',
    ),
    build_tag('meta',
      content=overrides.get('description', get_description()),
      property='og:description',
    ),
    build_tag('meta',
      content=build_absolute_url(overrides.get('image', get_logo_url())),
      property='og:image',
    ),
    build_tag('meta',
      content=get_site_name(),
      property='og:site_name',
    ),
    build_tag('meta',
      content=overrides.get('title', get_site_name()),
      property='og:title',
    ),
    build_tag('meta',
      content='website',
      property='og:type',
    ),
    build_tag('meta',
      content=build_absolute_url(overrides.get('url', '')),
      property='og:url',
    ),
    build_tag('link',
      href=get_logo_url(),
      rel='icon',
    ),
    build_tag('title', "{} - {}".format(title, get_site_name()) if title else get_site_name()),
    build_json_ld(get_json_ld()),
    build_combined_styles(),
    build_style("""
    :link {
      color: mediumblue;
    }
    :visited {
      color: navy;
    }
    :link:active,
    :visited:active {
      color: red;
    }
    a {
      transition: opacity 0.2s;
    }
    a:hover {
      opacity: 0.75;
    }
    body {
      color: """ + get_text_color() + """;
      font-family: sans-serif;
      margin: 1em auto;
      max-width: 60em;
      padding: 0 1em;
      word-wrap: break-word;
    }
    """),
  )

build_header = tuxapp.memoizes()(
  lambda: \
    join_elements(
      build_flag(None, None,
        build_style("""
        .header-logo {
          height: 3.5em;
          min-width: 3.5em;
        }
        .header-logo img {
          max-width: 100%;
        }
        """),
        build_tag("a.header-logo", None,
          build_tag('img',
            alt="Logo",
            src=get_logo_url(),
          ),
          href='.',
          title="Home",
        ),
        build_tag('', None,
          build_style("""
          .header-top > :last-child {
            display: block;
          }
          @media (min-width: 30em) {
            .header-top > :last-child {
              display: table-cell;
              text-align: right;
            }
          }
          """),
          build_flag(".header-top", None,
            build_style("""
            .header-name {
              color: inherit;
              font-family: serif;
              font-size: xx-large;
              text-decoration: none;
              white-space: nowrap;
            }
            """),
            build_tag("a.header-name", get_site_name(),
              href='.',
              title="Home",
            ),
            build_search(),
          ),
          build_style("""
          .header-description {
            color: grey;
            font-style: italic;
          }
          """),
          build_tag(".header-description", get_description()),
        ),
      ),
      build_separator(),
    )
)

build_json_ld = lambda data: build_script(json.dumps(data, ensure_ascii=False, separators=(',', ':'), sort_keys=True), "application/ld+json")

build_lightbox = lambda text, image_url, video_url=None, is_video=False: \
  join_elements(
    build_tag("a.lightbox", None,
      build_tag('video',
        preload='metadata',
        src=video_url,
      ) \
        if is_video else \
      build_tag('img',
        alt=text,
        src=image_url,
      ),
      href="{}/#{}".format(os.path.dirname(image_url), os.path.basename(image_url).rsplit('.', 1)[0]),
    ),
    build_style("""
    .lightbox-overlay {
      background: rgba(0, 0, 0, 0.75);
      bottom: 0;
      display: none;
      left: 0;
      position: fixed;
      right: 0;
      top: 0;
    }
    .lightbox-overlay:target {
      display: block;
    }
    .lightbox-overlay iframe,
    .lightbox-overlay img,
    .lightbox-overlay video {
      -webkit-transform: translate(-50%, -50%);
      left: 50%;
      max-height: 90vh;
      max-width: 90vw;
      position: absolute;
      top: 50%;
      transform: translate(-50%, -50%);
    }
    .lightbox-overlay iframe {
      border: none;
    }
    """),
    build_tag("#{}.lightbox-overlay".format(os.path.basename(image_url).rsplit('.', 1)[0]), None,
      build_tag('iframe',
        allowfullscreen=True,
        height='480',
        src="https://www.youtube.com/embed/{}?enablejsapi=1".format(tuxapp.search(r"(?<=^https://www\.youtube\.com/watch\?v=).+", video_url)),
        width='853',
      ) \
        if video_url and video_url.startswith("https://www.youtube.com/") else \
      build_tag('video',
        controls=True,
        preload='metadata',
        src=video_url,
      ) \
        if video_url else \
      build_tag('img',
        alt=text,
        src=image_url,
      ),
      build_style("""
      .lightbox-action {
        color: white;
        font-size: 2.5em;
        position: absolute;
        text-align: center;
        text-decoration: none;
        width: 1.2em;
      }
      """),
      build_style("""
      .lightbox-action.is-close {
        right: 0;
        top: 0;
      }
      """),
      build_tag("a.lightbox-action.is-close", u"\N{MULTIPLICATION SIGN}",
        href="{}/#".format(os.path.dirname(image_url)),
        title="Close",
      ),
      build_style("""
      .lightbox-action.is-next,
      .lightbox-action.is-previous {
        margin-top: -0.6em;
        top: 50%;
      }
      .lightbox-action.is-next[href$="#"],
      .lightbox-action.is-previous[href$="#"] {
        visibility: hidden;
      }
      .lightbox-action.is-next {
        right: 0;
      }
      .lightbox-action.is-previous {
        left: 0;
      }
      """),
      build_tag("a.lightbox-action.is-next", u"\N{BLACK RIGHT-POINTING SMALL TRIANGLE}", title="Next"),
      build_tag("a.lightbox-action.is-previous", u"\N{BLACK LEFT-POINTING SMALL TRIANGLE}", title="Previous"),
    ),
  )

build_main = lambda: \
  join_elements(
    build_head(os.path.relpath(get_build_path(), os.path.dirname(get_main_path()))),
    build_tag('link',
      href=get_feed_url(),
      rel='alternate',
      title=get_feed_name(),
      type="application/atom+xml",
    ),
    build_header(),
    build_tag('h2', "Categories"),
    build_columns(build_card(
      get_category_icon_url(category),
      filter_category_name(category),
      get_category_description(category),
      get_category_url(category),
      count,
    ) for category, count in get_categories()),
    build_tag('h2', "Groups"),
    build_columns(build_tag('', None,
      build_tag('a', filter_group_name(group), href=get_group_url(group)),
      build_tag('span', " ({})".format(count)),
    ) for group, count in get_groups()),
    build_tag('h2', "Recent apps"),
    build_columns(build_app_card(app, True) for app, _ in get_recent_apps(16)),
    build_footer(),
  )

build_script = lambda script, type=None: build_tag('script', None, remove_whitespace(script), type=type)

build_search = lambda: \
  join_elements(
    build_style("""
    .header-search.is-hidden {
      display: none;
    }
    """),
    build_tag("form.header-search.is-hidden", None,
      build_script(r"""document.querySelector(".header-search").className = document.querySelector(".header-search").className.replace(" is-hidden", '');"""),
      build_tag('input',
        name='query',
        placeholder="Search",
        type='search',
      ),
      onsubmit="""location = "https://www.google.ru/search?q=" + encodeURIComponent("site:" + location.host + ' ' + this.query.value); return false;""",
    ),
  )

build_separator = lambda: \
  join_elements(
    build_style("""
    .separator {
      background: lightgrey;
      border: none;
      clear: both;
      height: 1px;
      margin: 1em 0;
    }
    """),
    build_tag("hr.separator"),
  )

build_style = lambda style: \
  "{}{}{}".format(
    get_style_prefix(),
    remove_whitespace(style),
    get_style_suffix(),
  )

build_tag = lambda selector, text=None, *children, **attributes: \
  u"""<{}{}{}>{}{}{}""".format(
    extract_tag_name(selector),
    build_tag_attributes(selector, attributes) if attributes or '#' in selector or '.' in selector else '',
    '' if children or extract_tag_name(selector) not in get_void_elements() else '/',
    escape_html(text) if text else '',
    ''.join(children),
    "</{}>".format(extract_tag_name(selector)) if children or extract_tag_name(selector) not in get_void_elements() else '',
  )

build_tag_attributes = lambda selector, attributes: \
  ''.join(u" {}{}".format(
    name,
    '' if value is True else u"=\"{}\"".format(escape_html(value)),
  ) for name, value in sorted(dict(attributes, **{
    'class': ' '.join(re.findall(r"(?<=\.)[\w-]+", selector)),
    'id': ' '.join(re.findall(r"(?<=#)[\w-]+", selector)),
  }).items()) if value)

escape_html = lambda html: cgi.escape(html, True)

extract_tag_name = lambda selector: re.split(r"[#.]", selector, 1)[0] or 'div'

filter_app_name = lambda name: name.lstrip('~')

filter_category_name = lambda category: category.title()

filter_group_name = lambda group: group.replace('-', ' ').title()

get_app_json_ld = lambda app: \
  {
    '@context': "http://schema.org",
    '@type': 'SoftwareApplication',
    'applicationCategory': filter_category_name(tuxapp.query_appfile(app, 'category')),
    'description': tuxapp.query_appfile(app, 'description') or tuxapp.query_appfile(app, 'title'),
    'image': build_absolute_url(build_app_og_image_url(app)),
    'installUrl': build_absolute_url(get_app_url(app)),
    'name': "{} on {}".format(tuxapp.query_appfile(app, 'name'), get_site_name()),
    'operatingSystem': 'Linux',
    'releaseNotes': media.query_app_info(app, 'changelog-url'),
    'screenshot': build_absolute_url(build_app_image_url(app, media.get_app_screenshot_path(app, media.query_app_info(app, 'screenshot-urls').split()[0]))) if media.query_app_info(app, 'screenshot-urls') else '',
    'softwareVersion': tuxapp.fetch_app_version(app),
    'url': tuxapp.query_appfile(app, 'homepage-url'),
  }

get_app_path = lambda app: "{}/apps/{}/index.html".format(get_build_path(), app)

get_app_url = lambda app: "{}/".format(os.path.relpath(os.path.dirname(get_app_path(app)), get_build_path()))

get_apps = lambda: (tuxapp.extract_app(path) for path in glob.iglob(tuxapp.get_appfile_path('*')))

get_assets_path = lambda: "{}/assets".format(os.path.dirname(__file__))

get_build_path = lambda: "{}/build".format(os.path.dirname(__file__))

get_categories = lambda: tuple(sorted(collections.Counter(tuxapp.query_appfile(app, 'category') for app in get_apps()).items()))

get_category_description = lambda category: \
  {
    'audio': "Applications for presenting, creating, or processing audio",
    'development': "Applications for development",
    'education': "Educational software",
    'game': "Video games",
    'graphics': "Applications for viewing, creating, or processing graphics",
    'network': "Network applications",
    'office': "Office type applications",
    'science': "Scientific software",
    'settings': "Settings applications",
    'system': "System applications",
    'utility': "Small utility applications",
    'video': "Applications for presenting, creating, or processing video",
  }[category]

get_category_icon_path = lambda category: "{}/categories/{}.png".format(get_build_path(), category)

get_category_icon_url = lambda category: os.path.relpath(get_category_icon_path(category), get_build_path())

get_category_path = lambda category: "{}/categories/{}/index.html".format(get_build_path(), category)

get_category_url = lambda category: "{}/".format(os.path.relpath(os.path.dirname(get_category_path(category)), get_build_path()))

get_copyright = lambda: u"\N{COPYRIGHT SIGN} 2017 {}".format(get_site_name())

get_description = lambda: u"An open catalog of easily installable and up-to-date Linux\N{REGISTERED SIGN} applications"

get_feed_name = lambda: "Recent apps"

get_feed_path = lambda: "{}/feed.xml".format(get_build_path())

get_feed_url = lambda: "{}".format(os.path.relpath(get_feed_path(), get_build_path()))

get_format_name = lambda format: \
  {
    'appimage': "AppImage",
    'deb': "deb",
    'flatpak': "Flatpak",
    'rpm': "rpm",
    'snap': "snap",
    'tar': "tarball",
  }.get(format, format.title())

get_github_url = lambda url='': "https://github.com/{}{}".format(tuxapp.get_github_repository(), "/{}".format(url) if url else '')

get_group_path = lambda group: "{}/groups/{}/index.html".format(get_build_path(), group)

get_group_url = lambda group: "{}/".format(os.path.relpath(os.path.dirname(get_group_path(group)), get_build_path()))

get_groups = lambda: tuple(sorted(collections.Counter(tuxapp.query_appfile(app, 'group') for app in get_apps()).items()))

get_json_ld = lambda: \
  [
    {
      '@context': "http://schema.org",
      '@type': 'WebSite',
      'description': get_description(),
      'image': build_absolute_url(get_logo_url()),
      'name': get_site_name(),
      'url': build_absolute_url(),
    },
    {
      '@context': "http://schema.org",
      '@type': 'SoftwareApplication',
      'description': tuxapp.get_description().format(tuxapp.__name__),
      'image': build_absolute_url(get_logo_url()),
      'name': tuxapp.__name__,
      'operatingSystem': 'Linux',
      'softwareVersion': tuxapp.__version__,
      'url': build_absolute_url(),
    },
  ]

get_logo_path = lambda: "{}/logo.png".format(get_build_path())

get_logo_url = lambda: os.path.relpath(get_logo_path(), get_build_path())

get_main_path = lambda: "{}/index.html".format(get_build_path())

get_recent_apps = tuxapp.memoizes()(
  lambda limit=10: \
    tuple(itertools.islice(((app, timestamp) for timestamp, apps in functools.reduce(
      lambda apps, app: (apps.setdefault(int(app), []) or apps if app.isdigit() and len(app) == 10 else os.path.isfile(tuxapp.get_appfile_path(app)) and apps[max(apps)].append(app)) or apps,
      tuxapp.read_process(r"""
      git -C {} log --name-status --pretty=format:%ct ./apps | \
      grep -Po "(^\d+|(?<=^A\tapps/)[^.].+)" | \
      head -1000
      """.format(tuxapp.quote_argument(os.path.dirname(__file__)))).splitlines(),
      {},
    ).items() if apps for app in apps), limit))
)

get_site_name = lambda: "TuxApp"

get_style_prefix = lambda: "<!-- <style>"

get_style_regex = lambda: re.compile(r"{}(.*?){}".format(re.escape(get_style_prefix()), re.escape(get_style_suffix())), re.S)

get_style_suffix = lambda: "</style> -->"

get_text_color = lambda: "#222"

get_void_elements = lambda: \
  (
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
  )

join_elements = lambda *elements: ''.join(elements)

main = \
  tuxapp.handles_exceptions(
  tuxapp.does(lambda arguments=tuple(sys.argv[1:]), *args, **kwargs: arguments and tuxapp.call_process("xdg-open {} > /dev/null 2>&1 &".format(tuxapp.join_arguments(get_app_path(tuxapp.extract_app(argument)) for argument in arguments))))(
  tuxapp.silences(
    lambda arguments=tuple(sys.argv[1:]): \
      (arguments or tuxapp.remove_directory(get_build_path())) and \
      tuxapp.copy_directory(get_assets_path(), get_build_path()) and \
      write_apps(tuxapp.extract_app(argument) for argument in arguments or glob.iglob(tuxapp.get_appfile_path('*'))) and \
      (arguments or write_categories(sorted(get_apps()))) and \
      (arguments or write_groups(sorted(get_apps()))) and \
      (arguments or write_feed()) and \
      (arguments or write_main())
  )))

process_lightbox = lambda html: update_lightbox(html, tuple(re.findall(r""" class="lightbox"[^"]* href="([^"]+)""", html)))

process_styles = lambda html: \
  get_style_regex().sub('', html).replace(
    build_combined_styles(),
    build_tag('style', None, *functools.reduce(
      lambda styles, style: styles if style in styles else styles + (style,),
      get_style_regex().findall(html),
      (),
    )),
  )

remove_whitespace = lambda string: re.sub(r"^\s+", '', string, 0, re.M).replace('\n', '')

update_lightbox = lambda html, urls: \
  functools.reduce(
    lambda html, url: re.sub(r"""( class="lightbox-action is-previous" (?!href=))""", r"""\g<0>href="{}" """.format(url), html, 1),
    ('#',) + urls[:-1],
    functools.reduce(
      lambda html, url: re.sub(r"""( class="lightbox-action is-next" (?!href=))""", r"""\g<0>href="{}" """.format(url), html, 1),
      urls[1:] + ('#',),
      html,
    ),
  )

write_app = lambda app: tuxapp.write_file(get_app_path(app), process_styles(build_app(app)))

write_categories = lambda apps: write_lists(apps, 'category', get_category_path, build_category)

write_feed = lambda: tuxapp.write_file(get_feed_path(), build_feed(get_recent_apps(100)))

write_groups = lambda apps: write_lists(apps, 'group', get_group_path, build_group)

write_lists = lambda apps, key, get_path, build: \
  all((os.path.isfile(get_path(tuxapp.query_appfile(app, key))) or tuxapp.write_file(get_path(tuxapp.query_appfile(app, key)), build(tuxapp.query_appfile(app, key)))) and tuxapp.write_file(get_path(tuxapp.query_appfile(app, key)), build_app_card(app, True), True) for app in apps) and \
  all(tuxapp.write_file(path, process_styles(u"{}{}".format(tuxapp.read_file(path), build_footer()))) for path in glob.iglob(get_path('*')))

write_main = lambda: tuxapp.write_file(get_main_path(), process_styles(build_main()))

if __name__ == '__main__':
  main()
