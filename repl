#!/bin/bash
set -eu -o pipefail

read -r -d '' script << EOF || :
from __future__ import print_function

def debug(function, *args, **kwargs):
  import inspect
  import pdb
  import readline
  import rlcompleter

  def runcall(self, *args, **kwargs):
    previous_runcall(self, *args, **kwargs)
    readline.clear_history()
    readline.read_history_file(debug.history_path)
  previous_runcall, pdb.Pdb.runcall = pdb.Pdb.runcall, runcall
  readline.write_history_file(debug.history_path)

  completer = rlcompleter.Completer()
  def complete(self, *args, **kwargs):
    completer.namespace = dict(locals, **self.curframe.f_locals)
    completer.use_main_ns = 0
    return completer.complete(*args, **kwargs)
  pdb.Pdb.complete = complete

  locals = inspect.currentframe().f_back.f_locals
  debugging_function = next((getattr(locals[name], 'non_reloadable', locals[name]) for name, value in locals.items() if id(value) == id(function)), function)
  reload()
  pdb.Pdb(completekey="\e[25~").runcall(debugging_function, *args, **kwargs)

def main():
  import atexit
  import os
  import readline
  import rlcompleter

  readline.set_history_length(10000)
  path = os.path.expanduser("~/.python_history")
  if os.path.exists(path):
    readline.read_history_file(path)
  atexit.register(readline.write_history_file, path)
  setattr(debug, 'history_path', path)

  __builtins__.debug = debug
  del globals()['main']
  reload()

def reload(*args, **kwargs):
  if args or kwargs:
    return __builtins__.reload(*args, **kwargs)
  else:
    import functools
    import imp
    import inspect
    import os

    def reloads(variables, variable):
      def decorator(function):
        function.non_reloadable = function
        @functools.wraps(function)
        def wrapper(*args, **kwargs):
          reload()
          return variables[variable](*args, **kwargs)
        return wrapper
      return decorator

    if len(inspect.stack()) <= 3:
      for path in "$@".split():
        mtime = os.path.getmtime(path)
        module = os.path.basename(path)
        setattr(reload, 'mtimes', getattr(reload, 'mtimes', {}))
        if mtime != reload.mtimes.get(module):
          reload.mtimes[module] = mtime
          variables = vars(imp.load_source(module, path))
          for variable, value in variables.items():
            if not variable.startswith('__'):
              globals()[variable] = reloads(variables, variable)(value) if hasattr(value, '__call__') else value

main()
EOF
PYTHONSTARTUP=<(echo "$script") exec "${TUXAPP_PYTHON-python}"
