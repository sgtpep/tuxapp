#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import, print_function, unicode_literals

import functools
import glob
import os
import re
import sys

from lib import (
  appfile,
  generating,
  parsing,
  testing,
  tuxapp,
  utilities,
  validation,
)

def validate(validate_function):
  def decorator(function):
    @functools.wraps(function)
    def wrapper(*args, **kwargs):
      if is_repl():
        args = args + ('',)
      while True:
        result = function(*args, **kwargs)
        if result and result == args[-1]:
          return result
        else:
          try:
            validate_function(*args, result=result, **kwargs)
          except AssertionError as exception:
            tuxapp.print_exception(exception)
            args = args[:-1] + (result,)
          else:
            return result
    return wrapper
  return decorator

def execute_app(app):
  for distribution in testing.get_test_distributions()[:2]:
    print('Executing {} on {}'.format(app, distribution), file=sys.stderr)
    tuxapp.call_process(testing.build_bwrap_arguments(distribution, app))
    if not confirm_message('Continue?'):
      raise AssertionError
  print('Executing {} with firejail'.format(app), file=sys.stderr)
  utilities.install_missing_package('firejail')
  tuxapp.call_process((tuxapp.get_app_runner_path(app),))
  if not confirm_message('Continue?'):
    raise AssertionError
  return True

def input_text(message, prefill='', choices=(), is_whitespacy=False):
  try:
    import readline
    readline.set_startup_hook(lambda: readline.insert_text(filter_text(prefill, is_whitespacy).encode('utf-8', 'replace')))
    path = os.path.expanduser('~/.python_history')
    if is_repl() and os.path.isfile(path):
      readline.write_history_file(path)
    completer = readline.get_completer()
    readline.set_completer(choices if callable(choices) else lambda text, state: tuple(choice for choice in choices if choice.startswith(text))[state])
    delimeters = readline.get_completer_delims()
    readline.set_completer_delims(' ')
    try:
      import builtins
    except ImportError:
      import __builtin__ as builtins
    return filter_text(getattr(builtins, 'raw_input', input)('{}: '.format(message)).decode('utf-8', 'replace'), is_whitespacy)
  finally:
    readline.set_startup_hook()
    if is_repl() and os.path.isfile(path):
      readline.clear_history()
      readline.read_history_file(path)
    readline.set_completer(completer)
    readline.set_completer_delims(delimeters)

@tuxapp.handle_exceptions
def main():
  data = dict(tuxapp.parse_appfile(tuxapp.extract_app(sys.argv[1])), app=tuxapp.extract_app(sys.argv[1])) if sys.argv[1:] else {'app': get_default_app()}
  step = 0
  while True:
    try:
      data = get_update_appfile_functions()[step](data)
      step += 1
      if step == len(get_update_appfile_functions()):
        break
    except AssertionError as exception:
      tuxapp.print_exception(exception)
      step -= 1
      if step < 0:
        raise KeyboardInterrupt
    except EOFError:
      raise KeyboardInterrupt
    except KeyboardInterrupt:
      step -= 1
      if step < 0:
        raise KeyboardInterrupt
      print()
  return True

check_appfile_existence = lambda app: \
  app \
    if not os.path.isfile(tuxapp.get_appfile_path(app)) or sys.argv[1:] and tuxapp.extract_app(sys.argv[1]) == app or confirm_message('Overwrite an existing file?') else \
  ''

check_url_protocol = lambda url: \
  url.replace('http://', 'https://', 1) \
    if validation.is_url_valid(url) and not sys.argv[1:] and not validation.check_url_https(url) else \
  url

complete_app_packages = lambda app, text, state: tuple(row[0].split(':', 1)[0] for row in tuxapp.connect_data(tuxapp.get_app_package_data_path(app)).execute('SELECT key FROM items WHERE key LIKE ? LIMIT 100', ('{}%:url'.format(text),)).fetchall())[state]

confirm_message = lambda message, is_no=False: \
  not re.match(r'($|n)', input_text('{} [y/N]'.format(message)), re.I) \
    if is_no else \
  bool(re.match(r'($|y)', input_text('{} [Y/n]'.format(message)), re.I))

detect_app_distribution_executable = lambda app, prefix='': \
  detect_app_distribution_executables(app, prefix)[0] \
    if len(detect_app_distribution_executables(app, prefix)) == 1 else \
  detect_app_distribution_executables(app, prefix, True)[0] \
    if len(detect_app_distribution_executables(app, prefix, True)) == 1 else \
  ''

detect_app_distribution_executables = lambda app, prefix='', is_all=False: tuple(path.replace(tuxapp.get_app_distribution_path(app), '.') for path in glob.iglob(tuxapp.get_app_distribution_file_path(app, os.path.join(prefix, '*'))) if tuxapp.is_file_executable(path) and (is_all or os.path.basename(path).lower() == app.lower()))

detect_app_executable = lambda app: \
  tuxapp.install_app_distribution(app) and \
  detect_installed_app_executable(app)

detect_installed_app_executable = lambda app: \
  './AppRun' \
    if tuxapp.is_file_executable(tuxapp.get_app_distribution_file_path(app, 'AppRun')) else \
  detect_app_distribution_executable(app, 'usr/bin') \
    if os.path.isdir(tuxapp.get_app_distribution_file_path(app, 'usr/bin')) else \
  detect_app_distribution_executable(app, 'opt/*') \
    if os.path.isdir(tuxapp.get_app_distribution_file_path(app, 'opt')) else \
  detect_app_distribution_executable(app)

detect_version_regex = lambda html: \
  r'/download/v([^/]+)' \
    if re.search(r'/releases/download/v\d', html) else \
  r'/download/([^/]+)' \
    if re.search(r'/releases/download/\d', html) else \
  r'"softwareVersion"\s*:\s*"([^"]+)' \
    if re.search(r'"softwareVersion"\s*:\s*"', html) else \
  r'"softwareVersion" content="([^"]+)' \
    if '"softwareVersion" content="' in html else \
  r'"softwareVersion">([^<]+)' \
    if '"softwareVersion">' in html else \
  ''

filter_app = lambda app: re.sub(r'[^a-z0-9]+', '-', app.lower()).strip('-')

filter_app_download_url = lambda app, urls, prefill: \
  urls \
    if urls == prefill else \
  ' '.join(filter_url(filter_download_url(url)) for url in urls.split()).replace(tuxapp.request_app_version(app), '{version}')

filter_description = lambda description: \
  description and \
  description[0].upper() + \
  description[1:] + \
  ('' if description[-1] in validation.get_punctuation() else '.')

filter_download_url = lambda url: \
  'http://downloads.sourceforge.net/project/{}'.format(tuxapp.parse_url(url).path.replace('/projects/', '').replace('/files/', '/').replace('/download', '')) \
    if tuxapp.parse_url(url).netloc == 'sourceforge.net' else \
  url

filter_executable = lambda executable: \
  executable \
    if './' in executable else \
  './{}'.format(executable)

filter_name = lambda name: name.rstrip(''.join(validation.get_punctuation()))

filter_packages = lambda packages: ' '.join(sorted(set(packages.split())))

filter_text = lambda string, is_whitespacy=False: \
  string.strip() \
    if is_whitespacy else \
  re.sub(r'\s+', ' ', string.replace('\t', ' ')).strip()

filter_title = lambda title: \
  title and \
  (title[0].upper() + title[1:]).rstrip(''.join(validation.get_punctuation()))

filter_url = lambda url: check_url_protocol(filter_url_path(url.split('#', 1)[0]))

filter_url_path = lambda url: \
  '{}/'.format(url) \
    if validation.is_url_valid(url) and not tuxapp.parse_url(url).path else \
  url

filter_version_url = lambda url: re.sub(r'^.+({}/releases\b).*$'.format(utilities.get_github_url_pattern()), r'https://\1/latest', url, 1)

generate_appfile = lambda data: ''.join('{}={}\n'.format(key, data[key]) for key in sorted(data) if key != 'app')

get_default_app = lambda: 'temp'

get_update_appfile_functions = lambda: \
  (
    update_appfile_homepage_url,
    update_appfile_name,
    update_appfile_app,
    update_appfile_version_url,
    update_appfile_version_regex,
    update_appfile_download_x86_64_url,
    update_appfile_download_x86_url,
    update_appfile_package_repository,
    update_appfile_executable,
    update_appfile_packages,
    update_appfile_execute,
    update_appfile_category,
    update_appfile_group,
    update_appfile_free_license,
    update_appfile_icon_url,
    update_appfile_title,
    update_appfile_description,
    update_appfile_generate,
  )

input_app = \
  validate(lambda *args, **kwargs: validation.validate_app(kwargs['result']))(
    lambda prefill='': check_appfile_existence(filter_app(input_text('Identifier', prefill)))
  )

input_app_description = \
  validate(lambda app, *args, **kwargs: validation.validate_app_description(app, kwargs['result']))(
    lambda app, prefill='': filter_description(input_text('Description', prefill))
  )

input_app_download_url = \
  validate(lambda app, architecture, *args, **kwargs: validation.validate_app_download_url(app, architecture, kwargs['result']))(
    lambda app, architecture, prefill='': filter_app_download_url(app, input_text('Download URL ({}){}'.format(architecture, '' if architecture == 'x86-64' else ' (optional)'), prefill), prefill)
  )

input_app_executable = \
  tuxapp.log(lambda app, *args, **kwargs: 'Executables: {}'.format(', '.join(list_app_executables(app))))(
  validate(lambda app, *args, **kwargs: validation.validate_executable(kwargs['result']))(
    lambda app, prefill='': filter_executable(input_text('Executable', prefill, list_app_executables(app) + tuple('./{}'.format(path) for path in list_app_executables(app))))
  ))

input_app_name = \
  validate(lambda app, *args, **kwargs: validation.validate_app_name(app, kwargs['result']))(
    lambda app, prefill='': filter_name(input_text('Name', prefill))
  )

input_app_packages = \
  validate(lambda app, *args, **kwargs: validation.validate_app_packages(app, kwargs['result']))(
    lambda app, prefill='': filter_packages(input_text('Packages', prefill, lambda text, state: complete_app_packages(app, text, state)))
  )

input_app_title = \
  validate(lambda app, *args, **kwargs: validation.validate_app_title(app, kwargs['result']))(
    lambda app, prefill='': filter_title(input_text('Title', prefill))
  )

input_app_version_regex = \
  validate(lambda app, *args, **kwargs: \
    validation.validate_app_version_regex(app, kwargs['result']) and \
    print('Detected version: {}'.format(tuxapp.request_app_version(app, kwargs['result'])), file=sys.stderr)
  )(
    lambda app, prefill='': input_text('Version regex', prefill, (), True)
  )

input_boolean = lambda message, is_no=False: \
  'yes' \
    if confirm_message(message, is_no) else \
  'no'

input_category = \
  tuxapp.log(lambda *args, **kwargs: 'Categories: {}'.format(', '.join(appfile.get_categories())))(
  validate(lambda *args, **kwargs: validation.validate_category(kwargs['result']))(
    lambda prefill='': input_text('Category', prefill, appfile.get_categories())
  ))

input_free_license = \
  validate(lambda *args, **kwargs: validation.validate_free_license(kwargs['result']))(
    lambda prefill='': input_boolean('Is license free?', prefill == 'no')
  )

input_group = \
  tuxapp.log(lambda *args, **kwargs: 'Groups: {}'.format(', '.join(appfile.get_groups())))(
  validate(lambda *args, **kwargs: validation.validate_group(kwargs['result'], True))(
    lambda prefill='': input_text('Group', prefill, appfile.get_groups())
  ))

input_homepage_url = \
  validate(lambda *args, **kwargs: validation.validate_homepage_url(kwargs['result']))(
    lambda prefill='': filter_url(input_text('Homepage URL', prefill))
  )

input_icon_url = \
  validate(lambda *args, **kwargs: validation.validate_icon_url(kwargs['result']))(
    lambda prefill='': filter_url(input_text('Icon URL', prefill))
  )

input_package_repository = \
  validate(lambda *args, **kwargs: validation.validate_package_repository(kwargs['result']))(
    lambda prefill='': input_text('Package repository', prefill, appfile.get_package_repositories())
  )

input_version_url = \
  validate(lambda *args, **kwargs: validation.validate_version_url(kwargs['result']))(
    lambda prefill='': filter_version_url(filter_url(input_text('Version URL', prefill)))
  )

is_repl = lambda: hasattr(sys, 'ps1')

list_app_executables = lambda app: \
  tuxapp.install_app_distribution(app) and \
  tuple(sorted(path.replace('{}/'.format(tuxapp.get_app_distribution_path(app)), '', 1).replace(' ', r'\ ') for path in tuxapp.list_app_distribution(app) if tuxapp.is_file_executable(path)))

update_appfile = \
  tuxapp.log_result(lambda *args, **kwargs: '> {}:\n{}'.format(tuxapp.get_appfile_path(kwargs['result']['app']).replace(os.path.expanduser('~'), '~', 1), '\n'.join('> {}'.format(line) for line in generate_appfile(kwargs['result']).splitlines())))(
    lambda data, key, value: \
      write_appfile(dict(data, **{key: value})) and \
      dict(data, **{key: value})
  )

update_appfile_app = lambda data: update_appfile(data, 'app', input_app(filter_app(data['name']) if data['app'] == get_default_app() else data['app']))

update_appfile_category = lambda data: update_appfile(data, 'category', input_category(data.get('category', '')))

update_appfile_description = lambda data: update_appfile(data, 'description', input_app_description(data['app'], data['description'] if 'description' in data else filter_description(parsing.parse_description(data['homepage-url']))))

update_appfile_download_x86_64_url = lambda data: update_appfile(data, 'download-x86-64-url', input_app_download_url(data['app'], 'x86-64', data.get('download-x86-64-url', '')))

update_appfile_download_x86_url = lambda data: update_appfile(data, 'download-x86-url', input_app_download_url(data['app'], 'x86', data.get('download-x86-url', '')))

update_appfile_executable = lambda data: update_appfile(data, 'executable', input_app_executable(data['app'], data['executable'] if 'executable' in data else detect_app_executable(data['app'])))

update_appfile_execute = lambda data: \
  tuxapp.install_app_packages(data['app']) and \
  tuxapp.install_app_runner(data['app']) and \
  execute_app(data['app'])

update_appfile_free_license = lambda data: update_appfile(data, 'free-license', input_free_license(data.get('free-license', 'yes')))

update_appfile_generate = lambda data: \
  parsing.parse_app(data['app']) and \
  utilities.open_url(generating.generate_app_page(data['app']))

update_appfile_group = lambda data: update_appfile(data, 'group', input_group(data.get('group', '')))

update_appfile_homepage_url = lambda data: update_appfile(data, 'homepage-url', input_homepage_url(data.get('homepage-url', '')))

update_appfile_icon_url = lambda data: update_appfile(data, 'icon-url', input_icon_url(data['icon-url'] if 'icon-url' in data else utilities.open_url(filter_url(parsing.parse_icon_url(data['homepage-url'])))))

update_appfile_name = lambda data: update_appfile(data, 'name', input_app_name(data['app'], data['name'] if 'name' in data else filter_name(parsing.parse_name(data['homepage-url']))))

update_appfile_package_repository = lambda data: update_appfile(data, 'package-repository', input_package_repository(data['package-repository'] if 'package-repository' in data else appfile.get_default_package_repository()))

update_appfile_packages = lambda data: \
  tuxapp.update_app_package_lists(data['app']) and \
  update_appfile(data, 'packages', input_app_packages(data['app'], data['packages'] if 'packages' in data else filter_packages(data['app'])))

update_appfile_title = lambda data: update_appfile(data, 'title', input_app_title(data['app'], data['title'] if 'title' in data else filter_title(parsing.parse_title(data['homepage-url']))))

update_appfile_version_regex = lambda data: update_appfile(data, 'version-regex', input_app_version_regex(data['app'], data['version-regex'] if 'version-regex' in data else detect_version_regex(parsing.request_url_cached(data.get('version-url') or data['homepage-url']))))

update_appfile_version_url = lambda data: update_appfile(data, 'version-url', input_version_url(data['version-url'] if 'version-url' in data else parsing.parse_version_url(data['homepage-url'])))

write_appfile = lambda data: \
  tuxapp.remove_file(tuxapp.get_appfile_path(get_default_app())) and \
  tuxapp.write_file(tuxapp.get_appfile_path(data['app']), generate_appfile(dict(dict.fromkeys(appfile.get_keys(), ''), **data)))

if __name__ == '__main__':
  main()
