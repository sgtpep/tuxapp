#!/usr/bin/env python
from __future__ import print_function
import functools
import imp
import os
import re
import sys

import lib.parsers
tuxapp = imp.load_source('tuxapp', os.path.join(os.path.dirname(__file__), 'tuxapp'))
validate = imp.load_source('validate', os.path.join(os.path.dirname(__file__), 'validate'))

def validates(validate_function):
  def decorator(function):
    @functools.wraps(function)
    def wrapper(*args, **kwargs):
      result = None
      while True:
        try:
          if result is not None:
            validates.prefill = result
          result = function(*args, **kwargs)
          validate_function(*args, result=result, **kwargs)
          return result
        except AssertionError as exception:
          print(exception.args[0] if exception.args else "Unknown error", file=sys.stderr)
        finally:
          if hasattr(validates, 'prefill'):
            del validates.prefill
    return wrapper
  return decorator

def input_text(prompt, prefill='', choices=(), is_whitespacy=False):
  try:
    import readline
    readline.set_startup_hook(lambda: readline.insert_text(getattr(validates, 'prefill', filter_text(prefill))))
    history_path = os.path.expanduser("~/.python_history")
    if hasattr(sys, 'ps1') and os.path.isfile(history_path):
      readline.write_history_file(history_path)
    completer, delimeters = readline.get_completer(), readline.get_completer_delims()
    readline.set_completer(lambda text, state: tuple(choice for choice in choices if choice.startswith(text))[state])
    readline.set_completer_delims('')
    try:
      import builtins
    except ImportError:
      import __builtin__ as builtins
    return filter_text(getattr(builtins, 'raw_input', input)("{}: ".format(prompt)))
  finally:
    readline.set_startup_hook()
    if hasattr(sys, 'ps1') and os.path.isfile(history_path):
      readline.clear_history()
      readline.read_history_file(history_path)
    readline.set_completer(completer)
    readline.set_completer_delims(delimeters)

filter_app = lambda app: re.sub(r"[^a-z0-9]+", '-', app.lower()).strip('-')

filter_description = lambda description: \
  u"{}{}{}".format(
    description[0].upper(),
    description[1:],
    '' if description[-1] in validate.get_punctuation() else '.',
  ) if description else ''

filter_name = lambda name: name.rstrip(''.join(validate.get_punctuation())) if name else ''

filter_text = lambda string, is_whitespacy=False: re.sub(r"\s+", '' if is_whitespacy else ' ', string.replace('\t', ' ')).strip()

filter_title = lambda title: u"{}{}".format(title[0].upper(), title[1:]).rstrip(''.join(validate.get_punctuation())) if title else ''

filter_url = lambda url: url.split('#', 1)[0] if validate.is_url_valid(url) and validate.check_url(url) else ''

filter_url_path = lambda url: "{}/".format(url) if validate.is_url_valid(url) and not tuxapp.parse_url(url).path else url

filter_url_protocol = lambda url: url if not validate.is_url_valid(url) or validate.check_url_protocol(url) else url.replace("http://", "https://", 1)

generate_appfile = lambda appfile: '\n'.join("{}={}".format(key, appfile[key]) for key in sorted(appfile) if key != 'app')

get_default_app = lambda: 'temp'

get_update_functions = lambda: \
  (
    update_homepage_url,
    update_name,
    update_app,
    update_category,
    update_group,
    update_free_license,
    update_icon_url,
    update_title,
    update_description,
  )

input_app = validates(lambda *args, **kwargs: \
  validate.validate_app(kwargs['result']) and \
  tuxapp.asserts("Existing appfile")(lambda app: not os.path.isfile(tuxapp.get_appfile_path(app)))(kwargs['result'])
)(
  lambda prefill='': filter_app(input_text("Identifier", prefill))
)

input_boolean = lambda question: 'yes' if re.match(r"^($|y)", input_text("{} [Y/n]".format(question)), re.I) else ''

input_category = \
  validates(lambda *args, **kwargs: validate.validate_category(kwargs['result']))(
  tuxapp.logs(lambda *args, **kwargs: "Categories: {}".format(", ".join(validate.get_categories())))(
    lambda prefill='': input_text("Category", prefill, validate.get_categories())
  ))

input_description = validates(lambda app, *args, **kwargs: validate.validate_description(app, kwargs['result']))(
  lambda app, prefill='': filter_description(input_text("Description", prefill))
)

input_free_license = validates(lambda *args, **kwargs: validate.validate_free_license(kwargs['result']))(
  lambda: input_boolean("Is license free?")
)

input_group = \
  validates(lambda *args, **kwargs: validate.validate_group(kwargs['result'], True))(
  tuxapp.logs(lambda *args, **kwargs: "Groups: {}".format(", ".join(validate.get_groups())))(
    lambda prefill='': input_text("Group", prefill, validate.get_groups())
  ))

input_homepage_url = validates(lambda *args, **kwargs: validate.validate_homepage_url(kwargs['result']))(
  lambda prefill='': input_url("Homepage URL", prefill)
)

input_icon_url = validates(lambda *args, **kwargs: validate.validate_icon_url(kwargs['result']))(
  lambda prefill='': filter_url(input_url("Icon URL", prefill))
)

input_name = validates(lambda app, *args, **kwargs: validate.validate_name(app, kwargs['result']))(
  lambda app, prefill='': filter_name(input_text("Name", prefill))
)

input_title = validates(lambda app, *args, **kwargs: validate.validate_title(app, kwargs['result']))(
  lambda app, prefill='': filter_title(input_text("Title", prefill))
)

input_url = lambda prompt, prefill='': filter_url_protocol(filter_url_path(input_text(prompt, prefill)))

main = tuxapp.handles_exceptions(
  lambda: functools.reduce(lambda appfile, update: update(appfile), get_update_functions(), {})
)

open_url = tuxapp.does(lambda url, *args, **kwargs: url and input_boolean("Open {} in the browser?".format(url)) and tuxapp.call_process("xdg-open {} > /dev/null 2>&1 &".format(tuxapp.quote_argument(url))))(lambda url: url)

update_app = lambda appfile: update_appfile(appfile, 'app', input_app(filter_app(appfile.get('name', ''))))

update_appfile = tuxapp.logs_after(
  lambda *args, **kwargs: \
    "> {}:\n{}".format(
      tuxapp.get_appfile_path(kwargs['result'].get('app', get_default_app())).replace(os.path.expanduser('~'), '~', 1),
      '\n'.join("> {}".format(line) for line in generate_appfile(kwargs['result']).splitlines()),
    )
, True)(
  lambda appfile, key, value: \
    write_appfile(dict(appfile, **{key: value})) and \
    dict(appfile, **{key: value})
)

update_category = lambda appfile: update_appfile(appfile, 'category', input_category(appfile.get('category', '')))

update_description = lambda appfile={}: update_appfile(appfile, 'description', input_description(appfile.get('app', get_default_app()), appfile.get('description', filter_description(lib.parsers.parse_description(appfile['homepage-url'])))))

update_free_license = lambda appfile: update_appfile(appfile, 'free-license', input_free_license())

update_group = lambda appfile: update_appfile(appfile, 'group', input_group(appfile.get('group', '')))

update_homepage_url = lambda appfile={}: update_appfile(appfile, 'homepage-url', input_homepage_url(appfile.get('homepage-url', '')))

update_icon_url = lambda appfile={}: update_appfile(appfile, 'icon-url', input_icon_url(appfile.get('icon-url', open_url(filter_url(lib.parsers.parse_icon_url(appfile['homepage-url']))))))

update_name = lambda appfile={}: update_appfile(appfile, 'name', input_name(appfile.get('app', get_default_app()), appfile.get('name', filter_name(lib.parsers.parse_name(appfile['homepage-url'])))))

update_title = lambda appfile={}: update_appfile(appfile, 'title', input_title(appfile.get('app', get_default_app()), appfile.get('title', filter_title(lib.parsers.parse_title(appfile['homepage-url'])))))

write_appfile = lambda appfile: \
  tuxapp.remove_file(tuxapp.get_appfile_path(get_default_app())) and \
  tuxapp.write_file(tuxapp.get_appfile_path(appfile.get('app', get_default_app())), "{}\n".format(generate_appfile(dict(dict.fromkeys(validate.get_appfile_keys(), ''), **appfile))))

if __name__ == '__main__':
  main()
