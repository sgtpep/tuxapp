#!/usr/bin/env python
from __future__ import print_function
import functools
import imp
import os
import re
import sys

try:
  from html.parser import HTMLParser
except ImportError:
  from HTMLParser import HTMLParser
try:
  import builtins
except ImportError:
  import __builtin__ as builtins
try:
  from urllib.parse import urlparse
except ImportError:
  from urlparse import urlparse

tuxapp = imp.load_source('tuxapp', "{}/tuxapp".format(os.path.dirname(__file__)))

class NameParser(HTMLParser):
  data = ''
  data_tag = None
  parent_attributes = {}
  parent_tag = None

  def handle_data(self, data):
    if self.data_tag:
      self.data += data
    elif self.parent_tag == 'script' and self.parent_attributes.get('type') == 'application/ld+json':
      import json
      data = json.loads(data)
      if not isinstance(data, list):
        data = [data]
      for datum in data:
        if datum.get('@type') in ('Product', 'WebSite') and datum.get('name'):
          raise ResultException(datum['name'])

  def handle_endtag(self, tag):
    if tag == self.data_tag:
      raise ResultException(self.data)
    self.parent_attributes = {}
    self.parent_tag = None

  def handle_starttag(self, tag, attributes):
    attributes = dict(attributes)
    if tag == 'a' and self.parent_tag == 'h1' or tag == 'h1' and self.parent_tag == 'a':
      self.data_tag = tag
    elif tag == 'meta' and self.parent_attributes.get('itemtype', '').startswith("http://schema.org/") and self.parent_attributes['itemtype'].rsplit('/', 1)[-1] in ('Product', 'SoftwareApplication'):
      raise ResultException(attributes['content'])
    elif tag == 'meta' and attributes.get('name') == 'application-name' and attributes.get('content'):
      raise ResultException(attributes['content'])
    elif tag == 'meta' and attributes.get('property') == 'og:site_name' and attributes.get('content'):
      raise ResultException(attributes['content'])
    elif tag == 'meta' and attributes.get('itemprop') == 'name' and attributes.get('content'):
      raise ResultException(attributes['content'])
    self.parent_attributes = attributes
    self.parent_tag = tag

class ResultException(Exception):
  def __init__(self, result):
    self.result = result
    super(ResultException, self).__init__()

def validates(message):
  def decorator(function):
    @functools.wraps(function)
    def wrapper(*args, **kwargs):
      result = None
      while True:
        if result:
          validates.prefill = result
        result = function(*args, **kwargs)
        if hasattr(validates, 'prefill'):
          del validates.prefill
        formatted_message = message(result)
        if formatted_message:
          print(formatted_message, file=sys.stderr)
        else:
          return result
    return wrapper
  return decorator

@validates(lambda result: not result and "Value is required")
def input_text(question="Text: ", prefill=''):
  import readline
  path = os.path.expanduser("~/.python_history")
  if hasattr(sys, 'ps1') and os.path.isfile(path):
    readline.write_history_file(path)
  if getattr(validates, 'prefill', prefill):
    readline.set_startup_hook(lambda: readline.insert_text(getattr(validates, 'prefill', prefill)))
  try:
    result = getattr(builtins, 'raw_input', input)(question).strip()
  finally:
    if prefill:
      readline.set_startup_hook()
  if hasattr(sys, 'ps1') and os.path.isfile(path):
    readline.clear_history()
    readline.read_history_file(path)
  return result

def is_url_valid(url):
  result = urlparse(url)
  return result.scheme in ('http', 'https') and bool(result.netloc)

def parse_html(parser, html):
  try:
    parser().feed(html)
  except ResultException as exception:
    return re.sub(r"\s+", ' ', exception.result.strip())

check_url = lambda url: bool(tuxapp.unasserts(tuxapp.fetch_headers)(url))

extract_url_name = lambda url: re.sub(r"-+", ' ', re.sub(r"^www\.", '', urlparse(url).netloc).split('.', 1)[0]).title()

filter_app = lambda app: re.sub(r"[^a-z0-9]+", '-', app.lower()).strip('-')

filter_url_path = lambda url: "{}/".format(url) if is_url_valid(url) and not urlparse(url).path else url

filter_url_protocol = lambda url: \
  url.replace("http://", "https://", 1) \
    if is_url_valid(url) and url.startswith("http://") and check_url(url.replace("http://", "https://", 1)) else \
  url

input_app = validates(lambda result: os.path.isfile(tuxapp.get_appfile_path(result)) and "File {} already exists".format(tildify_path(tuxapp.get_appfile_path(result))))(
  lambda prefill='': filter_app(input_text("Identifier: ", prefill))
)

input_url = \
  validates(lambda result: not check_url(result) and "URL does not exist")(
  validates(lambda result: not is_url_valid(result) and "URL is invalid")(
    lambda question="URL: ", prefill='': filter_url_protocol(filter_url_path(input_text(question, prefill)))
  ))

main = tuxapp.handles_exceptions(
  lambda: update_app(update_name(update_homepage()))
)

parse_name = lambda url: \
  urlparse(url).path.lstrip('/').split('/', 1)[0] \
    if url and ".github.io/" in url and urlparse(url).path.lstrip('/') else \
  parse_html(NameParser, tuxapp.fetch_url(url)) or extract_url_name(url) \
    if url else \
  ''

tildify_path = lambda path: \
  path.replace(os.path.expanduser('~'), '~', 1) \
    if path.startswith("{}/".format(os.path.expanduser('~'))) or path == os.path.expanduser('~') else \
  path

update_app = lambda appfile={}: update_appfile(appfile, 'app', input_app(filter_app(appfile.get('name', ''))))

update_appfile = tuxapp.outputs(
  lambda *args, **kwargs: \
    "> Appfile{}:\n{}".format(
      " {}".format(tildify_path(tuxapp.get_appfile_path(kwargs['result']['app']))) if 'app' in kwargs['result'] else '',
      '\n'.join("> {}={}".format(key, kwargs['result'][key]) for key in sorted(kwargs['result']) if key != 'app'),
    )
)(
  lambda appfile, key, value: \
    write_appfile(dict(appfile, **{key: value})) and \
    dict(appfile, **{key: value})
)

update_homepage = lambda appfile={}: update_appfile(appfile, 'homepage-url', input_url("Homepage: "))

update_name = lambda appfile={}: update_appfile(appfile, 'name', input_text("Name: ", parse_name(appfile.get('homepage-url'))))

write_appfile = lambda appfile: \
  tuxapp.write_file(tuxapp.get_appfile_path(appfile['app']), '\n'.join("{}={}".format(key, appfile[key]) for key in sorted(appfile) if key != 'app')) \
    if appfile.get('app') else \
  True

if __name__ == '__main__':
  main()
