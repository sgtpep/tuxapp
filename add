#!/usr/bin/env python
from __future__ import print_function
import functools
import imp
import os
import re
import sys

try:
  from html.parser import HTMLParser
except ImportError:
  from HTMLParser import HTMLParser
try:
  from urllib.parse import urlparse
except ImportError:
  from urlparse import urlparse

tuxapp = imp.load_source('tuxapp', "{}/tuxapp".format(os.path.dirname(__file__)))
validate = imp.load_source('validate', "{}/validate".format(os.path.dirname(__file__)))

def validates(validate_function):
  def decorator(function):
    @functools.wraps(function)
    def wrapper(*args, **kwargs):
      result = None
      while True:
        try:
          if result is not None:
            validates.prefill = result
          result = function(*args, **kwargs)
          validate_function(*args, result=result, **kwargs)
          return result
        except AssertionError as exception:
          print(exception.args[0], file=sys.stderr)
        finally:
          if hasattr(validates, 'prefill'):
            del validates.prefill
    return wrapper
  return decorator

def input_text(prompt, prefill='', choices=(), is_whitespacy=False):
  try:
    import readline
    readline.set_startup_hook(lambda: readline.insert_text(getattr(validates, 'prefill', prefill)))
    history_path = os.path.expanduser("~/.python_history")
    if hasattr(sys, 'ps1') and os.path.isfile(history_path):
      readline.write_history_file(history_path)
    completer, delimeters = readline.get_completer(), readline.get_completer_delims()
    readline.set_completer(lambda text, state: tuple(choice for choice in choices if choice.startswith(text))[state])
    readline.set_completer_delims('')
    try:
      import builtins
    except ImportError:
      import __builtin__ as builtins
    result = getattr(builtins, 'raw_input', input)(prompt).replace('\t', ' ')
    if not is_whitespacy:
      result = re.sub(r"\s+", ' ', result).strip()
    return result
  finally:
    readline.set_startup_hook()
    if hasattr(sys, 'ps1') and os.path.isfile(history_path):
      readline.clear_history()
      readline.read_history_file(history_path)
    readline.set_completer(completer)
    readline.set_completer_delims(delimeters)

class NameParser(HTMLParser):
  data = ''
  data_tag = None
  parent_attributes = {}
  parent_tag = None

  def handle_data(self, data):
    if self.data_tag:
      self.data += data
    elif self.parent_tag == 'script' and self.parent_attributes.get('type') == 'application/ld+json':
      import json
      data = json.loads(data)
      if not isinstance(data, list):
        data = [data]
      for datum in data:
        if datum.get('@type') in ('Product', 'WebSite') and datum.get('name'):
          raise ResultException(datum['name'])

  def handle_endtag(self, tag):
    if tag == self.data_tag:
      raise ResultException(self.data)
    self.parent_attributes = {}
    self.parent_tag = None

  def handle_starttag(self, tag, attributes):
    attributes = dict(attributes)
    if tag == 'a' and self.parent_tag == 'h1' or tag == 'h1' and self.parent_tag == 'a':
      self.data_tag = tag
    elif tag == 'meta' and self.parent_attributes.get('itemtype', '').startswith("http://schema.org/") and self.parent_attributes['itemtype'].rsplit('/', 1)[-1] in ('Product', 'SoftwareApplication'):
      raise ResultException(attributes['content'])
    elif tag == 'meta' and attributes.get('name') == 'application-name' and attributes.get('content'):
      raise ResultException(attributes['content'])
    elif tag == 'meta' and attributes.get('property') == 'og:site_name' and attributes.get('content'):
      raise ResultException(attributes['content'])
    elif tag == 'meta' and attributes.get('itemprop') == 'name' and attributes.get('content'):
      raise ResultException(attributes['content'])
    self.parent_attributes = attributes
    self.parent_tag = tag

class ResultException(Exception):
  pass

def parse_html(parser, html):
  try:
    parser().feed(html)
  except ResultException as exception:
    return re.sub(r"\s+", ' ', exception.args[0].strip())

extract_url_name = lambda url: re.sub(r"-+", ' ', re.sub(r"^www\.", '', urlparse(url).netloc).split('.', 1)[0]).title()

filter_app = lambda app: re.sub(r"[^a-z0-9]+", '-', app.lower()).strip('-')

filter_url_path = lambda url: "{}/".format(url) if validate.is_url_valid(url) and not urlparse(url).path else url

filter_url_protocol = lambda url: url if not validate.is_url_valid(url) or validate.check_url_protocol(url) else url.replace("http://", "https://", 1)

generate_appfile = lambda appfile: '\n'.join("{}={}".format(key, appfile[key]) for key in sorted(appfile) if key != 'app')

get_default_app = lambda: 'temp'

input_app = validates(lambda *args, **kwargs: \
  validate.validate_app(kwargs['result']) and \
  tuxapp.asserts("Existing appfile")(lambda app: not os.path.isfile(tuxapp.get_appfile_path(app)))(kwargs['result'])
)(
  lambda prefill='': filter_app(input_text("Identifier: ", prefill))
)

input_homepage_url = validates(lambda *args, **kwargs: validate.validate_homepage_url(kwargs['result']))(
  lambda prefill='': input_url("Homepage: ", prefill)
)

input_name = validates(lambda app, *args, **kwargs: validate.validate_name(app, kwargs['result']))(
  lambda app, prefill='': input_text("Name: ", prefill)
)

input_url = lambda prompt, prefill='': filter_url_protocol(filter_url_path(input_text(prompt, prefill)))

main = tuxapp.handles_exceptions(
  lambda: functools.reduce(lambda appfile, update: update(appfile), get_update_functions(), {})
)

parse_name = lambda url: \
  urlparse(url).path.lstrip('/').split('/', 1)[0] \
    if ".github.io/" in url and urlparse(url).path.lstrip('/') else \
  parse_html(NameParser, tuxapp.fetch_url(url)) or extract_url_name(url)

update_app = lambda appfile: update_appfile(appfile, 'app', input_app(filter_app(appfile.get('name', ''))))

update_appfile = tuxapp.logs_after(
  lambda *args, **kwargs: \
    "> {}:\n{}".format(
      tuxapp.get_appfile_path(kwargs['result']['app']).replace(os.path.expanduser('~'), '~', 1),
      '\n'.join("> {}".format(line) for line in generate_appfile(kwargs['result']).splitlines()),
    )
, True)(
  lambda appfile, key, value: \
    write_appfile(dict(appfile, **{key: value})) and \
    dict(appfile, **{key: value})
)

update_homepage_url = lambda appfile: update_appfile(appfile, 'homepage-url', input_homepage_url())

update_name = lambda appfile: update_appfile(appfile, 'name', input_name(appfile['app'], parse_name(appfile['homepage-url']) if 'homepage-url' in appfile else ''))

write_appfile = lambda appfile: \
  tuxapp.remove_file(tuxapp.get_appfile_path(get_default_app())) and \
  tuxapp.write_file(tuxapp.get_appfile_path(appfile['app']), "{}\n".format(generate_appfile(dict(dict.fromkeys(validate.get_appfile_keys(), ''), **appfile)))) \
    if appfile.get('app') else \
  True

if __name__ == '__main__':
  main()
