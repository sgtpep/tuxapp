#!/usr/bin/env python
from __future__ import print_function
import glob
import imp
import os
import stat
import sys

tuxapp = imp.load_source('tuxapp', "{}/tuxapp".format(os.path.dirname(__file__)))

@tuxapp.memoizes()
def parse_arguments(arguments):
  import argparse
  parser = argparse.ArgumentParser()
  parser.add_argument('-a', '--arch', action='store_true')
  parser.add_argument('-r', '--root', action='store_true')
  parser.add_argument('-t', '--trace', action='store_true')
  parser.add_argument('app', nargs='?')
  parser.add_argument('arguments', nargs=argparse.REMAINDER)
  return parser.parse_args(arguments)

call_process_verbose = tuxapp.logs("Running the command: {}")(
  lambda arguments, *args, **kwargs: tuxapp.call_process(arguments, *args, **kwargs)
)

build_bwrap_arguments = lambda distribution, app=None, arguments=(), is_trace=False: \
  install_missing_bubblewrap() and \
  ('bwrap', '--bind', get_container_path(distribution), '/',
    '--bind', "/run", "/run",
    '--dev-bind', "/dev", "/dev",
    '--proc', "/proc",
    '--ro-bind', "/etc/resolv.conf", "/etc/resolv.conf",
    '--ro-bind', "/sys", "/sys",
    '--setenv', 'TUXAPP_TEST', '1',
    '--tmpfs', "/tmp",
    '--unshare-pid',
  ) + \
  tuple(option for path in get_bwrap_bind_paths() if os.path.isdir(path) for option in ('--ro-bind', path, path)) + \
  (('--setenv', 'TUXAPP_TRACE', '1') if is_trace else ()) + \
  (
    ('--bind', tuxapp.get_app_path(app), tuxapp.get_app_path(app)) \
      if app else \
    ('--bind', tuxapp.get_base_path(), tuxapp.get_base_path())
  ) + \
  ('bash', '-l') + \
  ((tuxapp.get_app_runner_path(app),) + arguments if app else ())

build_root_bwrap_arguments = lambda distribution: \
  install_missing_bubblewrap() and \
  ('bwrap', '--bind', get_container_path(distribution), "/",
    '--bind', tuxapp.make_directories(get_container_cache_path(distribution)), "/var/cache/pacman/pkg" if distribution == 'arch' else "/var/cache/apt/archives",
    '--dev', "/dev",
    '--proc', "/proc",
    '--ro-bind', "/etc/resolv.conf", "/etc/resolv.conf",
    '--tmpfs', "/tmp",
    '--unshare-pid',
  ) + \
  ('env', '-u', 'LANG') + \
  (('fakechroot', 'fakeroot') if distribution == 'arch' else ('fakeroot-sysv',)) + \
  ('bash', '-l')

call_root_bwrap = lambda distribution, script: tuxapp.call_process(build_root_bwrap_arguments(distribution) + ('-c', "set -eu -o pipefail\n{}".format(script)))

configure_arch_container = lambda: \
  all(install_arch_container_package(package) for package in ('fakechroot', 'fakeroot', 'sed')) and \
  tuxapp.write_file("{}/etc/pacman.d/mirrorlist".format(get_container_path('arch')), "Server = {}".format(get_arch_url("$repo/os/$arch"))) and \
  call_root_bwrap('arch', r"""
  pacman-key --init
  pacman-key --populate archlinux
  packages=(
    base
    strace
    ttf-dejavu
    xorg-server
  )
  pacman -Sy --force --needed --noconfirm "${packages[@]}"
  """)

configure_debian_container = lambda: \
  all(install_debian_container_package(package) for package in ('fakeroot', 'libfakeroot')) and \
  tuxapp.write_file("{}/etc/apt/apt.conf.d/50keep-downloaded-packages".format(get_container_path('debian')), """Binary::apt::APT::Keep-Downloaded-Packages "true";""") and \
  tuxapp.write_file("{}/etc/apt/sources.list".format(get_container_path('debian')), """\
deb http://deb.debian.org/debian {0} main
deb http://security.debian.org/ {0}/updates main
""".format(tuxapp.get_debian_release())) and \
  call_root_bwrap('debian', r"""
  apt update
  DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
  packages=(
    fontconfig-config
    fonts-dejavu-core
    strace
    xserver-xorg-core
  )
  DEBIAN_FRONTEND=noninteractive apt install -y "${packages[@]}"
  """) and \
  all(tuxapp.remove_file(path) for filename in ("libSM.so", "libXt.so") for path in glob.glob("{}/usr/lib/x86_64-linux-gnu/{}*".format(get_container_path('debian'), filename)))

execute_bwrap = lambda distribution, app=None, arguments=(), is_trace=False: tuxapp.execute_process(build_bwrap_arguments(distribution, app, arguments, is_trace))

execute_root_bwrap = lambda distribution: tuxapp.execute_process(build_root_bwrap_arguments(distribution))

fetch_arch_container_url = lambda: get_arch_url("iso/latest/") + tuxapp.fetch_grep_url(get_arch_url("iso/latest/"), ('-Po', '-m', '1', "(?<=\")archlinux-bootstrap-[^\"]+"))

fetch_arch_package_url = lambda package: get_arch_package_url(package) + tuxapp.fetch_grep_url(get_arch_package_url(package), ('-Po', '-m', '1', "(?<=\"){}-[^\"]+".format(package)))

fetch_debian_package_url = lambda package: "{}{}".format(tuxapp.get_debian_url(), tuxapp.fetch_grep_url(get_debian_package_url(package), ('-o', '-m', '1', "[^/]*/pool/[^\"]*")))

get_arch_package_url = lambda package: get_arch_url("{}/os/x86_64/".format('extra' if package == 'fakechroot' else 'core'))

get_arch_url = lambda path='': "https://mirrors.kernel.org/archlinux/{}".format(path)

get_bwrap_bind_paths = lambda: \
  (
    "/usr/lib/locale",
    "/usr/share/alsa",
  ) + \
  tuple(glob.glob("/usr/lib/*-linux-gnu/alsa-lib")) + \
  tuple(glob.glob("/usr/lib/*-linux-gnu/pulseaudio"))

get_container_cache_path = lambda distribution: "{}/{}".format(tuxapp.get_cache_path(), distribution)

get_container_check_path = lambda distribution: "{}/var/lib/tuxapp".format(get_container_path(distribution))

get_container_path = lambda distribution: tuxapp.get_app_path(distribution)

get_debian_container_url = lambda: "https://download.openvz.org/template/precreated/contrib/debian-9.0-{}-minimal.tar.gz".format(tuxapp.detect_architecture().replace('-', '_'))

get_debian_package_url = lambda package: \
  "https://packages.debian.org/{}/{}/{}/download".format(
    tuxapp.get_debian_release(),
    tuxapp.detect_debian_architecture(),
    package,
  )

install_arch_container = lambda: \
  tuxapp.unpack_tarball(tuxapp.download_missing_cache_file(fetch_arch_container_url()), get_container_path('arch'), ("--strip-components=1",)) and \
  tuxapp.change_file_mode("{}/etc/ca-certificates/extracted/cadir".format(get_container_path('arch')), lambda mode: mode | stat.S_IWUSR) and \
  configure_arch_container() and \
  'arch'

install_arch_container_package = lambda package: \
  tuxapp.silences(tuxapp.unpack_tarball)(tuxapp.download_missing_cache_file(fetch_arch_package_url(package)), get_container_path('arch'), ("--exclude=.*", "--warning=no-unknown-keyword")) and \
  package

install_bubblewrap = \
  tuxapp.asserts("bubblewrap is not installed")(
  tuxapp.logs("Installing bubblewrap")(
    lambda: tuxapp.is_command_exist('apt') and call_process_verbose("sudo apt update && sudo apt install -y bubblewrap")
  ))

install_container = tuxapp.asserts("Failed to install {}")(
  lambda distribution: install_arch_container() if distribution == 'arch' else install_debian_container()
)

install_debian_container = lambda: \
  tuxapp.unpack_tarball(tuxapp.download_missing_cache_file(get_debian_container_url()), get_container_path('debian'), ("--exclude=./dev",)) and \
  configure_debian_container() and \
  'debian'

install_debian_container_package = lambda package: \
  tuxapp.silences(tuxapp.unpack_package)(tuxapp.download_missing_cache_file(fetch_debian_package_url(package)), get_container_path('debian')) and \
  package

install_missing_bubblewrap = lambda: tuxapp.is_command_exist('bwrap') or install_bubblewrap()

install_missing_container = lambda distribution: \
  distribution \
    if os.path.isfile(get_container_check_path(distribution)) else \
  install_container(distribution) and \
  tuxapp.write_file(get_container_check_path(distribution)) and \
  distribution

main = tuxapp.handles_exceptions(
  lambda arguments=tuple(sys.argv[1:]): \
    execute_root_bwrap(install_missing_container(parse_distribution_arguments(arguments))) \
      if parse_arguments(arguments).root else \
    execute_bwrap(install_missing_container(parse_distribution_arguments(arguments)), tuxapp.check_app_installed(tuxapp.extract_app(parse_arguments(arguments).app)), tuple(parse_arguments(arguments).arguments), parse_arguments(arguments).trace) \
      if parse_arguments(arguments).app else \
    execute_bwrap(install_missing_container(parse_distribution_arguments(arguments)))
)

parse_distribution_arguments = lambda arguments: 'arch' if parse_arguments(arguments).arch else 'debian'

if __name__ == '__main__':
  main()
