#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import, print_function, unicode_literals

import functools
import glob
import os
import sys

if __name__ == '__main__':
  import subprocess
  subprocess.check_call(('git', '-C', os.path.dirname(__file__), 'pull', '-q'))

from lib import ( # pylint: disable=wrong-import-position
  generating,
  parsing,
  testing,
  tuxapp,
  utilities,
  validation,
)

def handle_failed_app_requests(function):
  @functools.wraps(function)
  def wrapper(app, *args, **kwargs):
    try:
      result = function(app, *args, **kwargs)
      utilities.update_data((app, 'request-failures'), '0')
      return result
    except AssertionError as exception:
      if exception.args and ' failed to request ' in exception.args[0]:
        count = int(utilities.query_data((app, 'request-failures'), '0')) + 1
        utilities.update_data((app, 'request-failures'), count)
        if count >= 3:
          utilities.update_data((app, 'request-failures'), '0')
          raise
        return False
      else:
        raise
  return wrapper

def skip_processed_app(prefix):
  def decorator(function):
    @functools.wraps(function)
    def wrapper(app, *args, **kwargs):
      md5 = tuxapp.hash_md5(tuxapp.read_appfile(app) + tuxapp.request_app_version(app))
      if utilities.query_data((app, '{}-hash'.format(prefix))) == md5:
        return True
      else:
        result = function(app, *args, **kwargs)
        if result:
          utilities.update_data((app, '{}-hash'.format(prefix)), md5)
        return result
    return wrapper
  return decorator

def process_app_worker(app):
  return process_app(app)

copy_root = lambda: tuxapp.copy_directory(generating.get_build_path(), get_root_path())

diff_data = lambda: \
  write_data(get_dump_path('after')) and \
  tuxapp.uncheck(True)(tuxapp.call_process)(r'git diff -U0 --word-diff {} {} | tail -n +5 | grep -v "^@@ "'.format(tuxapp.quote_argument(get_dump_path('before')), tuxapp.quote_argument(get_dump_path('after')))) and \
  all(tuxapp.remove_file(get_dump_path(name)) for name in ('after', 'before'))

get_dump_path = lambda name: '/tmp/{}-{}'.format(tuxapp.get_name(), name)

get_root_path = lambda: '/var/www/html'

main = \
  tuxapp.handle_exceptions(
    lambda: \
      snapshot_data() and
      (
        process_app(tuxapp.extract_app(sys.argv[1]))
          if len(sys.argv[1:]) == 1 else \
        tuxapp.silence(all)(testing.install_missing_container(distribution) for distribution in testing.get_test_distributions()) and \
        (process_apps(tuxapp.extract_app(argument) for argument in sys.argv[1:] or glob.iglob(tuxapp.get_appfile_path('*'))) or True) and \
        generating.generate_pages()
      ) and \
      diff_data() and \
      copy_root()
  )

process_app = \
  handle_failed_app_requests(
    lambda app: \
      validation.validate_appfile(app) and \
      skip_processed_app('tested')(testing.test_app)(app) and \
      skip_processed_app('parsed')(parsing.parse_app)(app) and \
      generating.generate_app_page(app)
  )

process_apps = lambda apps: utilities.call_parallel(process_app_worker, apps, 4)

query_data = lambda: \
  (row for rows in iter(utilities.connect_data().execute('SELECT * FROM items WHERE {} ORDER BY key'.format(' AND '.join('key NOT LIKE "{}"'.format(value) for value in (
    '%-hash',
    '%:request-failures',
    '%:update-timestamp',
    'container:%',
    'data-uri:%',
  )))).fetchmany, []) for row in rows)

snapshot_data = lambda: os.path.isfile(get_dump_path('before')) or write_data(get_dump_path('before'))

write_data = lambda path: tuxapp.write_file(path, ''.join('{} = {}\n'.format(row[0].replace(':', '.'), row[1]) for row in query_data()))

if __name__ == '__main__':
  main()
